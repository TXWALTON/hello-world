# Attempt at creating a gui for a new mr entry

import pandas as pd
from pandas import Series, DataFrame
import numpy as np
import csv
import tkinter as tk

LARGE_FONT= ("Verdana", 12)


p2p_df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\merged3.csv', thousands=',')

p2p_df1 = p2p_df[['Requisitioner Name','Requisition ID', 'Requisition Date', 'PO Number', 'PO Date', 'PO Buyer Name', 'PO Line', 'Contract ID' , 
                 'PO Quantity', 'PO Amount', 'DDO PO', 'PO Vendor Name', 'Department ID PO', 'Fund Code PO', 'Class Field PO', 
                  'Project CostinG Business Unit PO', 'Project ID PO', 'Receipt ID', 'Receipt Date', 'Voucher ID', 
                 'Voucher Amount', 'Invoice ID', 'Total PO Amount', 'Total Amount Received', 'Purchase Method']]

p2p_df1_imd = p2p_df1.loc[p2p_df1['Requisitioner Name'].isin(['Walton Timothy', 'Rhoads Jay', 'Birdwell Diana', 
                                                              'Robinson Debra', 'Garcia Karen'])]

def new_request():
    df = pd.read_csv(r'C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv')

    user_entry = input('Enter the new request information, Y or N: ').upper()
    ptype = input('Enter Purchase Type (HW, SW, SVC, POCN): ').upper()
    ticket = input('Enter Ticket Number: ').upper()
    description = input('Enter Description: ').upper()
    ddo = input('Enter Requesting DDO: ').upper()
    initials = input('Enter Initials: ').upper()
    requisiiton = input('Enter Requisition or POCN ID: ')
    df1 = pd.DataFrame(data=[[ptype, ticket, description, ddo, initials, requisiiton,'NA','NA','NA','NA','NA','NA',
                              'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA', 'NA']], 
                       columns= ['Purchase Type', 'Ticket Number', 'Description', 'Requesting DDO', 
                                 'Requisitioner Name','Requisition ID', 'Requisition Date', 'PO Number', 
                                 'PO Date', 'Service Start Date', 'Service End Date', 'PO Buyer Name', 
                                 'PO Line', 'Contract ID', 'PO Quantity', 'PO Amount', 'DDO PO', 
                                 'PO Vendor Name','Department ID PO', 'Fund Code PO', 'Class Field PO',
                                 'Project CostinG Business Unit PO','Project ID PO', 'Receipt ID',
                                 'Receipt Date', 'Voucher ID', 'Voucher Amount', 'Invoice ID', 
                                 'Total PO Amount', 'Total Amount Received'])

    df = pd.concat([df,df1], ignore_index=True)
    df.to_csv('C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv', sep=',', mode='w', encoding='utf-8', index=False)


class P2P_Gui(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)
        
        tk.Tk.wm_title(self, 'IMD Procurement MR Database')
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        
        for F in (HomePage, EntryPage, SearchPage, ReqPage, PoPage, RecPage):

            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(HomePage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()

        
class HomePage(tk.Frame):

    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text='What Would You Like to Do?', font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry_button = tk.Button(self, text='New Entry', command= lambda: controller.show_frame(EntryPage))
        entry_button.pack()
        
        lookup_button = tk.Button(self, text='MR Lookup', command= lambda: controller.show_frame(SearchPage))
        lookup_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.showQuitDialog)
#         quit_button.pack()
        
#     def showQuitDialog(self):
#         quitdialog = QuitDialog(tk.Tk)
#         quitdialog.start()

#     def destroyit(self):
#         self.frame.destroy(self)
        
class EntryPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="New MR Entry", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        self.label = tk.Label(self, text= 'Enter Purchase Type (HW, SW, SVC, POCN)')
        self.label.pack()
        self.entry1 = tk.Entry(self)
        self.entry1.pack()
        self.entry1.focus_set()
    
        self.label = tk.Label(self, text= 'Enter Ticket Number')
        self.label.pack()
        self.entry2 = tk.Entry(self)
        self.entry2.pack()
        self.entry2.focus_set()
        
        self.label = tk.Label(self, text= 'Enter Description')
        self.label.pack()
        self.entry3 = tk.Entry(self)
        self.entry3.pack()
        self.entry3.focus_set()
        
        self.label = tk.Label(self, text= 'Enter Requesting DDO')
        self.label.pack()
        self.entry4 = tk.Entry(self)
        self.entry4.pack()
        self.entry4.focus_set()
        
        self.label = tk.Label(self, text= 'Enter Requisitioner Name')
        self.label.pack()
        self.entry5 = tk.Entry(self)
        self.entry5.pack()
        self.entry5.focus_set()
        
        self.label = tk.Label(self, text= 'Enter Requisition ID')
        self.label.pack()
        self.entry6 = tk.Entry(self)
        self.entry6.pack()
        self.entry6.focus_set()
        
        enter_button = tk.Button(self, text='Enter', command= self.write_file)
        enter_button.pack()
        
        home_button = tk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.destroy)
#         quit_button.pack()

    def write_file(self):
        with open ('C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv', 'a') as f:
            w = csv.writer(f, quoting=csv.QUOTE_ALL)
            w.writerow([self.entry1.get(), self.entry2.get(), self.entry3.get(), 
                        self.entry4.get(), self.entry5.get(), self.entry6.get()])
            f.to_csv('C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv', sep=',', mode='w', encoding='utf-8', index=False)
            

    
class SearchPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="What Would You Like to Search?", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        req_button = tk.Button(self, text='Go To Req Search', command= lambda: controller.show_frame(ReqPage))
        req_button.pack()
                                  
        po_button = tk.Button(self, text='Go To PO Search', command= lambda: controller.show_frame(PoPage))
        po_button.pack()
        
        rec_button = tk.Button(self, text='Go To Receipt Search', command= lambda: controller.show_frame(RecPage))
        rec_button.pack()
        
        home_button = tk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.destroy)
#         quit_button.pack()


class ReqPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="Receipt Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry = tk.Entry(self, text= 'Enter Requisition ID: ')
        entry.pack()
        entry.focus_set()
        
        req_button = tk.Button(self, text='Search Requisition')#, command= lambda: controller.)
        req_button.pack()
        
        back_button = tk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = tk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.destroy)
#         quit_button.pack()
        
        
class PoPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="PO Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry = tk.Entry(self, text= 'Enter PO ID: ')
        entry.pack()
        entry.focus_set()
        
        po_button = tk.Button(self, text='Search PO')#, command= lambda: controller.)
        po_button.pack()
        
        back_button = tk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = tk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.destroy)
#         quit_button.pack()
        
        
class RecPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="Receipt Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry = tk.Entry(self, text= 'Enter Receipt ID: ')
        entry.pack()
        entry.focus_set()
        
        rec_button = tk.Button(self, text='Search Receipt')#, command= lambda: controller.)
        rec_button.pack()
        
        back_button = tk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = tk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
#         quit_button = ttk.Button(self, text='Exit', command= self.destroy)
#         quit_button.pack()

        
# class  QuitDialog():

#     def __init__(self, instance):

#         self.instance = instance

#         self.quitDialog = tk.Toplevel()

#         warnMessage = tk.Label(master=self.quitDialog,
#                                 text='Are you sure that you want to quit? ').grid(row=1, column=1, columnspan=2)
#         quitButton = tk.Button(master= self.quitDialog ,
#                                 text='Yes',
#                                 command = self.quitALL).grid(row=2, column=1)
#         cancelButton = tk.Button(master= self.quitDialog,
#                                 text='No',
#                                 command = lambda: self.quitDialog.destroy()).grid(row=2, column=2)

#     def start(self):
#         # self.invalidDiag.grab_set() #takes control over the dialog (makes it active)
#         self.quitDialog.wait_window()

#     def quitALL(self):
#         self.quitDialog.destroy()
#         self.instance.destroy(self)

app = P2P_Gui()
app.mainloop()
