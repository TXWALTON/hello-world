# Attempt at creating a gui for a new mr entry

import pandas as pd
from pandas import Series, DataFrame
import numpy as np
import csv
import tkinter as tk
from tkinter import ttk
import datetime

LARGE_FONT= ("Verdana", 12)
    

class P2P_Gui(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)
        
        tk.Tk.wm_title(self, 'IMD Procurement MR Database')
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        
        for F in (HomePage, EntryPage, SearchPage, ReqPage, PoPage, RecPage):

            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(HomePage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise() 


class MessageBoxes(P2P_Gui):

    def close_program(self):

        app.destroy()

    def close_message(self):

        close_popup = tk.Tk()
        close_popup.wm_title('!')

        label = ttk.Label(close_popup, text='Are you sure you want to quit?')
        label.pack(side='top', fill='x', pady=10)

        yes_button = ttk.Button(close_popup, text='Yes', command = self.close_program)
        yes_button.pack(side='left')

        no_button = ttk.Button(close_popup, text='No', command = close_popup.destroy)
        no_button.pack(side='right')

        close_popup.mainloop()

    def check_message(self):

        check_popup = tk.Tk()
        check_popup.wm_title('!')

        label = ttk.Label(check_popup, text='Are you sure you want to submit?')
        label.pack(side='top', fill='x', pady=10)

        yes_button = ttk.Button(check_popup, text='Yes', command = self.write_file)
        yes_button.pack(side='left')

        no_button = ttk.Button(check_popup, text='No', command = check_popup.destroy)
        no_button.pack(side='right')

        check_popup.mainloop()
        
            
class HomePage(tk.Frame, MessageBoxes):

    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text='What Would You Like to Do?', font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry_button = ttk.Button(self, text='New Entry', command= lambda: controller.show_frame(EntryPage))
        entry_button.pack()
        
        lookup_button = ttk.Button(self, text='MR Lookup', command= lambda: controller.show_frame(SearchPage))
        lookup_button.pack()
        
        quit_button = ttk.Button(self, text='Exit', command= self.close_message)
        quit_button.pack()
        

class EntryPage(tk.Frame, MessageBoxes):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="New MR Entry", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        self.label = ttk.Label(self, text= 'Enter Purchase Type (HW, SW, SVC, POCN)')
        self.label.pack()
        self.entry1 = ttk.Entry(self)
        self.entry1.pack()
        self.entry1.focus_set()
    
        self.label = ttk.Label(self, text= 'Enter Ticket Number')
        self.label.pack()
        self.entry2 = ttk.Entry(self)
        self.entry2.pack()
        self.entry2.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Description')
        self.label.pack()
        self.entry3 = ttk.Entry(self)
        self.entry3.pack()
        self.entry3.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Requesting DDO')
        self.label.pack()
        self.entry4 = ttk.Entry(self)
        self.entry4.pack()
        self.entry4.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Requisitioner Name')
        self.label.pack()
        self.entry5 = tk.Entry(self)
        self.entry5.pack()
        self.entry5.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Requisition ID')
        self.label.pack()
        self.entry6 = ttk.Entry(self)
        self.entry6.pack()
        self.entry6.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Requisition Date')
        self.label.pack()
        self.entry7 = ttk.Entry(self)
        self.entry7.pack()
        self.entry7.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Line#')
        self.label.pack()
        self.entry8 = ttk.Entry(self)
        self.entry8.pack()
        self.entry8.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Line Cost')
        self.label.pack()
        self.entry9 = ttk.Entry(self)
        self.entry9.pack()
        self.entry9.focus_set()
        
        enter_button = ttk.Button(self, text='Enter', command= self.check_message)
        enter_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()

    def write_file(self):
        
        with open ('C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv', 'a', newline='') as f:
            w = csv.writer(f, quoting=csv.QUOTE_ALL)
            
            w.writerow([self.entry1.get().upper(), self.entry2.get().upper(), self.entry3.get().upper(), 
                        self.entry4.get().upper(), self.entry5.get().upper(), self.entry6.get(), 
                        self.entry7.get(), self.entry8.get(), self.entry9.get()])
            
            f.to_csv('C:\\Users\\TWALTON\\Desktop\\MRONSTEROIDS.csv', sep=',', mode='a', 
                     encoding='utf-8', index=False, newline='', line_terminator='')
            
    def clear_textbox(self):
        self.entry1.delete(0, 'end')
        self.entry2.delete(0, 'end')
        self.entry3.delete(0, 'end')
        self.entry4.delete(0, 'end')
        self.entry5.delete(0, 'end')
        self.entry6.delete(0, 'end')
        self.entry7.delete(0, 'end')
        self.entry8.delete(0, 'end')
        self.entry9.delete(0, 'end')
        
    
class SearchPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="What Would You Like to Search?", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        req_button = ttk.Button(self, text='Go To Req Search', command= lambda: controller.show_frame(ReqPage))
        req_button.pack()
                                  
        po_button = ttk.Button(self, text='Go To PO Search', command= lambda: controller.show_frame(PoPage))
        po_button.pack()
        
        rec_button = ttk.Button(self, text='Go To Receipt Search', command= lambda: controller.show_frame(RecPage))
        rec_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()


class ReqPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Requisition Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        self.req_entry = ttk.Entry(self, text= 'Enter Requisition ID: ')
        self.req_entry.pack()
        self.req_entry.focus_set()
        
        req_button = ttk.Button(self, text='Search Requisition', command=self.req_search)
        req_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
    def req_search(self):
        
        window = tk.Tk()
        window.geometry('1000x500')
            
        frame = tk.Frame(window)
        frame.pack()
        
        req_df = pd.read_csv(r'C:\\Users\\TWALTON\\Desktop\\p2p_all_ddo\\MRONSTEROIDS.csv')
        pd.options.display.max_columns = None
        pd.set_option('display.max_colwidth', -1)
        req_df = req_df.applymap(str)
        req_output = req_df.loc[req_df['Requisition ID'] == self.req_entry.get()]
        
        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END,req_output)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def clear_textbox(self):
        self.req_entry.delete(0, 'end')
        
        
class PoPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="PO Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry = ttk.Entry(self, text= 'Enter PO ID: ')
        entry.pack()
        entry.focus_set()
        
        po_button = ttk.Button(self, text='Search PO')#, command= lambda: controller.)
        po_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
        
class RecPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Receipt Search", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        
        entry = ttk.Entry(self, text= 'Enter Receipt ID: ')
        entry.pack()
        entry.focus_set()
        
        rec_button = ttk.Button(self, text='Search Receipt')#, command= lambda: controller.)
        rec_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()


app = P2P_Gui()
app.mainloop()
