import pandas as pd
from pandas import Series, DataFrame
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import *
from string import ascii_letters
%matplotlib notebook

# The 'thousands' parameter in read_csv removes ' from all values
# Replace NaN with 'None'

p2p_df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\merged3.csv', thousands=',')
  ## p2p_df = p2p_df.replace(np.nan, 'None', regex=True) ## 'This code breaks everything!'

#Display all columns
pd.options.display.max_columns = None

# using pd.to_datetime to normalize the dates #
# use errors= to fix 'day is out of range for month' error #
p2p_df['Requisition Date'] = pd.to_datetime(p2p_df['Requisition Date'], errors='coerce')
p2p_df['PO Date'] = pd.to_datetime(p2p_df['PO Date'], errors='coerce')
p2p_df['Receipt Date'] = pd.to_datetime(p2p_df['Receipt Date'], errors='coerce')
p2p_df['Requisition to PO Date'] = p2p_df['PO Date'] - p2p_df['Requisition Date']
p2p_df['PO to Receipt'] = p2p_df['Receipt Date'] - p2p_df['PO Date']

#Change 'PO Amount' from object to string to float (needed to remove the commas via thousands in read_csv parameter)
p2p_df['PO Amount'] = p2p_df['PO Amount'].astype(float)

#Change 'Requisition to PO Date' from object to string and 'extract' the float
p2p_df['Requisition to PO Date'] = p2p_df['Requisition to PO Date'].astype(str).str.extract('(\d+)').astype(float)
p2p_df['PO to Receipt'] = p2p_df['PO to Receipt'].astype(str).str.extract('(\d+)').astype(float)

# Create new dataframe #
p2p_df1 = p2p_df[['Requisition ID', 'Requisition Date', 'PO Number', 'PO Date', 'PO Buyer Name', 'PO Line', 'Contract ID' , 
                 'PO Quantity', 'PO Amount', 'DDO PO', 'Department ID PO', 'Fund Code PO', 'Class Field PO', 
                  'Project CostinG Business Unit PO', 'Project ID PO', 'Receipt ID', 'Receipt Date', 'Voucher ID', 
                 'Voucher Amount', 'Invoice ID', 'Total PO Amount', 'Total Amount Received', 'Purchase Method', 
                  'Requisition to PO Date', 'PO to Receipt']]
                  
# Dropping duplicates based on 'PO Number' column
# Summing values in 'PO Amount' based on DDO PO
p2p_df1 = p2p_df1.drop_duplicates(['PO Number'])
ddo_po_amount = p2p_df1.groupby(['DDO PO'])['PO Amount'].sum().astype('int64')

ddo_po_amount.plot(x='DDO PO', y='PO Amount', kind='bar', figsize= (15,5))

req_to_po = p2p_df1.groupby(['DDO PO'])['Requisition to PO Date'].mean().astype('int64')
req_to_po.plot(x='DDO PO', y='Requisition to PO Date', kind='bar', figsize= (15,5))

po_to_receipt = p2p_df1.groupby(['DDO PO'])['PO to Receipt'].mean().astype('int64')
po_to_receipt.plot(x='DDO PO', y='PO to Receipt', kind='bar', figsize= (15,5))
