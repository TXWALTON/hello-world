import pandas as pd
import numpy as np
import csv
import tkinter as tk
import matplotlib.pyplot as plt
from matplotlib.dates import (YEARLY, MONTHLY, DateFormatter,
								rrulewrapper, RRuleLocator, drange)
from tkinter import ttk
from tkinter import filedialog
from tkinter import *
from tkinter.ttk import *
import os, sys, inspect
import os.path
import datetime
import webbrowser as wb
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import WebDriverException
from selenium.common.exceptions import SessionNotCreatedException
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.chrome.options import Options
import time
import requests
import urllib3
import shutil
import glob
import re
import unittest
		
req_list = ['Robinson Debra', 'Walton Timothy', 'Rhoads Jay', 'Garcia Karen', 'Jimerson Alexis',
					  'Birdwell Diana', 'Eckert Lauren', 'Burford Angelia', 'Ruemke Melissa', 'Pope Dominique']

pending_po = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\txdotnowticketstest.csv', encoding='windows-1252', dtype=str)
pending_po = pending_po.rename(columns = {'number':'Ticket Number', 'ref_sc_task.u_peoplesoft_erq':'Requisition ID'})
pending_po['Requisition ID'] = pending_po['Requisition ID'].str.lstrip('0')

auto_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\sctaskauto.csv', dtype='str')

entry_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasentrytest.csv', encoding='windows-1252', dtype=str)


LARGE_FONT= ("Verdana", 12)
	

class P2P_Gui(tk.Tk):

	def __init__(self, *args, **kwargs):
		
		tk.Tk.__init__(self, *args, **kwargs)
		
		tk.Tk.wm_title(self, 'Atlas v1.6')
		
		container = tk.Frame(self)
		container.pack(side="top", fill="both", expand = True)

		container.grid_rowconfigure(0, weight=1)
		container.grid_columnconfigure(0, weight=1)

		self.frames = {}
		
		for F in (LoginPage, HomePage, EntryPage, SearchPage, ReportPage, DatePage, AllPage, PPTPage, VendorPage, TXDOTPage, PDFPage):

			frame = F(container, self)

			self.frames[F] = frame

			frame.grid(row=0, column=0, sticky="nsew")

		self.show_frame(LoginPage)

	def show_frame(self, cont):

		frame = self.frames[cont]
		frame.tkraise()


class MessageBoxes():
		
	def close_message(self):

		self.close_popup = tk.Tk()
		self.close_popup.wm_title('!')

		label = ttk.Label(self.close_popup, text='Are you sure you want to quit?')
		label.pack(side='top', fill='x', pady=10)

		yes_button = ttk.Button(self.close_popup, text='Yes', command = self.close_program)
		yes_button.pack(side='left')

		no_button = ttk.Button(self.close_popup, text='No', command = self.close_allmessage)
		no_button.pack(side='right')
		
		self.close_popup.mainloop()

	def check_message(self):

		self.check_popup = tk.Tk()
		self.check_popup.wm_title('!')

		label = ttk.Label(self.check_popup, text='Are you sure you want to submit?')
		label.pack(side='top', fill='x', pady=10)

		yes_button = ttk.Button(self.check_popup, text='Yes', command = self.combo_command)
		yes_button.pack(side='left')

		no_button = ttk.Button(self.check_popup, text='No', command = self.check_popup.destroy)
		no_button.pack(side='right')
		
		self.check_popup.mainloop()

	def ok_message(self):

		self.ok_popup = tk.Tk()
		self.ok_popup.wm_title('!')

		label = ttk.Label(self.ok_popup, text='Zero results found.')
		label.pack(side='top', fill='x', pady=10)

		ok_button = ttk.Button(self.ok_popup, text='Ok', command = self.close_allmessage)
		ok_button.pack()

		self.ok_popup.mainloop()
		
	def close_allmessage(self):
		
		self.close_popup.destroy()
		self.check_popup.destroy()
		self.ok_popup.destroy()
		
	def close_program(self):

		app.destroy()
		self.close_allmessage()
		

class LoginPage(tk.Frame, MessageBoxes):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		self.label = ttk.Label(self, text="Login", font=LARGE_FONT)
		self.label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label = ttk.Label(self, text= 'Enter Username')
		self.label.pack()
		self.user_entry = ttk.Entry(self)
		self.user_entry.pack()
		self.user_entry.focus_set()
		
		self.label = ttk.Label(self, text= 'Enter Password')
		self.label.pack()
		self.pwd_entry = ttk.Entry(self, show='*')
		self.pwd_entry.pack()
		self.pwd_entry.focus_set()

		# tk.Frame.configure(self, bg='blue')
		
		enter_button = ttk.Button(self, text='Enter', command= self.combo_function)
		enter_button.pack()
		
		clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		clear_button.pack()
		
		quit_button = ttk.Button(self, text='Exit', command= self.close_message)
		quit_button.pack()
		
	def clear_textbox(self):
		
		self.user_entry.delete(0, 'end')
		self.pwd_entry.delete(0, 'end')
		
	def combo_function(self):
		
		self.controller.fetch_user = self.user_entry.get()
		self.controller.fetch_pwd = self.pwd_entry.get()
		self.clear_textbox()
		self.controller.show_frame(HomePage)
		
		
class HomePage(tk.Frame, MessageBoxes):

	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text='Atlas v1.6', font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		entry_button = ttk.Button(self, text='New Entry', command= lambda: controller.show_frame(EntryPage))
		entry_button.pack()
		
		lookup_button = ttk.Button(self, text='Search', command= lambda: controller.show_frame(SearchPage))
		lookup_button.pack()
		
		report_button = ttk.Button(self, text='Run Report', command= lambda: controller.show_frame(ReportPage))
		report_button.pack()

		data_button = ttk.Button(self, text='Update Data', command=self.update_data)
		data_button.pack()
		
		login_button = ttk.Button(self, text='Login', command= lambda: controller.show_frame(LoginPage))
		login_button.pack()
		
		quit_button = ttk.Button(self, text='Exit', command= self.close_message)
		quit_button.pack()

	def empty_file(self):

		path = 'C:\\Users\\TWALTON\\Downloads\\*'
		r = glob.glob(path)

		for f in r:
			os.remove(f)

	def ppl_setup(self):

		p2p_url = 'https://fin.txdot.gov/psp/psfinpd/EMPLOYEE/ERP/c/REPORT_MANAGER.CONTENT_LIST.GBL?PAGE=PSRF_REPORTS_CHRON&Folder=MYFAVORITES'

		args = ['hide_console', ]
		self.ppl_driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
		self.ppl_driver.get(p2p_url)

	def ppl_login(self,username,password):
		
		self.ppl_driver.switch_to.default_content()
		enter_user = self.ppl_driver.find_element_by_id('userid')
		enter_user.send_keys(username)
		
		time.sleep(1)
		
		enter_password = self.ppl_driver.find_element_by_id('pwd')
		enter_password.send_keys(password)
		
		self.ppl_driver.find_element_by_css_selector('#login > div > div.ps_signinentry > div:nth-child(8) > input').click()

	def p2p_dl(self):

		column_names = ['Requesting Business Unit','Requisition ID','Requisition Name','Requisitioner ID','Requisitioner Name','Requisition Status','Requisition Date','Requisition Approval Date','Requisition Line Nbr',
		'Item SetID','Item ID','Item Description','Requested Quantity','Unit of Measure','Buyer ID','Buyer Name','Comp. Object Req','Accounting Year Req','DDO Req','Department ID Req','Fund Code Req','Class Field Req',
		'Project CostinG Business Unit Req','Project ID Req','PC Activity ID Req','PC Resource Type Req','PC Analysis Type Req','RFQ ID','RFQ Status','RFQ Open Date','RFQ Buyer ID','RFQ Dispatch Date','RFQ Line Number',
		'PO Business Unit','PO Number','PO Date','PO Buyer ID','PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status','PO Quantity','PO Amount','PO Vendor ID',
		'Vendor Location Code','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO','Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO','Project ID PO','PC Activity ID PO',
		'PC Resource Type PO','PC Analysis Type PO','Receiving Business Unit','Receipt ID','Receipt Updated By','Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','AP Business Unit','Voucher ID',
		'Voucher Entered Date','Voucher Amount','Invoice ID','Invoice Date','PO Reference Number','Ship Due Date','Online TSB','Service Start Date','Service End Date','Total PO Amount','Total Amount Received',
		'Purchase Method','Purchase Type']

		self.ppl_driver.switch_to.default_content()

		self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))

		WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="REPORT_NAME$0"]')))

		try:

			self.ppl_driver.find_element_by_xpath('//*[@id="REPORTS_GRID$hviewall$0"]').click()

			time.sleep(3)

			instance = self.ppl_driver.find_element_by_xpath('//*[@id="PSRF_PGLET_VW_PRCSINSTANCE$0"]').text

			self.ppl_driver.find_element_by_xpath('//*[@id="REPORT_NAME$0"]').click()

			self.ppl_driver.switch_to.default_content()

			self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))

			WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="URL$1"]')))

			time.sleep(1)

			self.ppl_driver.find_element_by_xpath('//*[@id="URL$1"]').click()

			dl_dir = r'C:\Users\TWALTON\Downloads\xpo005r_{}.csv'.format(instance)

			p2p_path = r'T:\IMD Sourcing\Atlas App\Data\P2PALLTEST.csv'

			while not os.path.exists(dl_dir):
				time.sleep(1)

			if os.path.isfile(dl_dir):
				time.sleep(1)

				self.p2p_all = pd.read_csv(dl_dir, index_col=None, skiprows=2, encoding = 'windows-1252', low_memory=False, usecols=column_names, dtype=str).replace({'"':'','=':''},regex=True)
				self.p2p_all['Requisition ID'] = self.p2p_all['Requisition ID'].str.lstrip('0')
				self.p2p_all.to_csv(p2p_path, index=False)

			else:

				raise ValueError("%s isn't a file!" % dl_dir)

		except(NoSuchElementException):

			time.sleep(3)

			instance = self.ppl_driver.find_element_by_xpath('//*[@id="PSRF_PGLET_VW_PRCSINSTANCE$0"]').text

			self.ppl_driver.find_element_by_xpath('//*[@id="REPORT_NAME$0"]').click()

			self.ppl_driver.switch_to.default_content()

			self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))

			WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="URL$1"]')))

			time.sleep(1)

			self.ppl_driver.find_element_by_xpath('//*[@id="URL$1"]').click()

			dl_dir = r'C:\Users\TWALTON\Downloads\xpo005r_{}.csv'.format(instance)

			p2p_path = r'T:\IMD Sourcing\Atlas App\Data\P2PALLTEST.csv'

			while not os.path.exists(dl_dir):
				time.sleep(1)

			if os.path.isfile(dl_dir):
				time.sleep(1)

				self.p2p_all = pd.read_csv(dl_dir, index_col=None, skiprows=2, encoding = 'windows-1252', low_memory=False, usecols=column_names, dtype=str).replace({'"':'','=':''},regex=True)
				self.p2p_all['Requisition ID'] = self.p2p_all['Requisition ID'].str.lstrip('0')
				self.p2p_all.to_csv(p2p_path, index=False)

			else:

				raise ValueError("%s isn't a file!" % dl_dir)

	def atlas_report(self, x, y, z):

		y = y[['Ticket Number', 'Requisition ID']]

		self.df1 = pd.concat([x,y], axis=0)

		self.df1 = self.df1.drop_duplicates(subset=['Ticket Number', 'Requisition ID'])

		self.df1.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasentrytest.csv', 
				 encoding='windows-1252', index=False)

		self.df3 = z.loc[z['Requisitioner Name'].isin(req_list)]

		self.df4 = pd.merge(self.df1, self.df3, on='Requisition ID', how='right')

		self.df4.to_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv', encoding='utf-8', index=False)

	def mr_spreadsheets(self, x):

		x['Requisition Date'] = pd.to_datetime(x['Requisition Date'], format='%m/%d/%Y', errors='coerce')

		mask2019 = (x['Requisition Date'] <= pd.to_datetime('today')) & (x['Requisition Date'] >= pd.to_datetime('09/01/2018'))

		x_2019 =  x.loc[mask2019]
		
		x_2019.to_csv(r'T:\FISCAL\FY 2019\PURCHASING 2019\MR2019.csv', encoding='windows-1252', index=False)

		mask2018 = (x['Requisition Date'] <= pd.to_datetime('08/31/2018')) & (x['Requisition Date'] >= pd.to_datetime('09/01/2017'))

		x_2018 = x.loc[mask2018]

		x_2018.to_csv(r'T:\FISCAL\FY 2018\PURCHASING 2018\MR2018.csv', encoding='windows-1252', index=False)

		self.ppl_driver.quit()

	def update_data(self):

		self.empty_file()
		self.ppl_setup()
		self.ppl_login(self.controller.fetch_user, self.controller.fetch_pwd)
		self.p2p_dl()
		self.atlas_report(entry_df, pending_po, self.p2p_all)
		self.mr_spreadsheets(self.df4)


class EntryPage(tk.Frame, MessageBoxes):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		self.label = ttk.Label(self, text=" New Entry  ", font=LARGE_FONT)
		self.label.pack(pady=10,padx=10)
		self.controller = controller

		self.label = ttk.Label(self, text= 'Enter Ticket Number')
		self.label.pack()
		self.entry1 = ttk.Entry(self)
		self.entry1.pack()
		self.entry1.focus_set()
	
		self.label = ttk.Label(self, text= 'Enter Requisition ID')
		self.label.pack()
		self.entry2 = ttk.Entry(self)
		self.entry2.pack()
		self.entry2.focus_set()
		
		self.enter_button = ttk.Button(self, text='Enter', command= self.check_message)
		self.enter_button.pack()
		
		self.clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		self.clear_button.pack()
		
		self.home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
		self.home_button.pack()

	def write_file(self):
		
		with open ('T:\\IMD Sourcing\\Atlas App\\Data\\atlasentrytest.csv', 'a', newline='') as f:
			w = csv.writer(f, quoting=csv.QUOTE_ALL, delimiter=',')
			
			w.writerow([self.entry1.get().upper(), self.entry2.get().upper()])
		
	def clear_textbox(self):
		
		self.entry1.delete(0, 'end')
		self.entry2.delete(0, 'end')
		
	def req_auto(self):
		
		txdotnow_url = 'https://txdotnow.service-now.com/'

		args = ['hide_console', ]
		driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
		driver.get(txdotnow_url)

		driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))

		enter_user = driver.find_element_by_id('user_name')
		enter_user.send_keys(self.controller.fetch_user)
		time.sleep(1)
		enter_password = driver.find_element_by_id('user_password')
		enter_password.send_keys(self.controller.fetch_pwd)

		driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()

		driver.switch_to.default_content()

		WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
		driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(self.entry1.get())
		time.sleep(2)
		driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')

		driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))
		WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sc_task.request_item.comments"]')))
		driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP REQ#: {} has been submitted for this ticket. This ticket will be updated when a PO has been issued by PRO Division.'''.format(self.entry2.get()))

		time.sleep(3)
		driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').clear()
		driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').send_keys('IMD_Pending_PO')

		time.sleep(1)
		driver.find_element_by_xpath('//*[@id="sc_task.u_peoplesoft_erq"]').send_keys('00000{}'.format(self.entry2.get()))

		time.sleep(1)
		driver.find_element_by_xpath('//*[@id="header_add_attachment"]').click()
		WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="attachment"]')))

		upload = driver.find_element_by_id('attachFile')
		upload.send_keys(r'T:\FISCAL\SHAREPOINT FILING DOC\REQUISITIONS\REQ{}.pdf'.format(self.entry2.get()))

		driver.find_element_by_xpath('//*[@id="attachment"]/div/div/header/button').click()
		
	def combo_command(self):
		
		self.check_popup.destroy()
		self.write_file()
		# self.merge_file()
		self.req_auto()
		self.clear_textbox()
		
		
class SearchPage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Select Search Option", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		all_button = ttk.Button(self, text=' Peoplesoft ', command= lambda: controller.show_frame(AllPage))
		all_button.pack()
		
		date_button = ttk.Button(self, text='    By Date   ', command= lambda: controller.show_frame(DatePage))
		date_button.pack()

		txdot_button = ttk.Button(self, text='TXDOTNow', command= lambda: controller.show_frame(TXDOTPage))
		txdot_button.pack()
 
		ppt_button = ttk.Button(self, text='       PPT       ', command= lambda: controller.show_frame(PPTPage))
		ppt_button.pack()

		vendor_button = ttk.Button(self, text='   Vendors   ', command= lambda: controller.show_frame(VendorPage))
		vendor_button.pack()

		pdf_button = ttk.Button(self, text='      PDFs      ', command= lambda: controller.show_frame(PDFPage))
		pdf_button.pack()
		
		home_button = ttk.Button(self, text='     Home      ', command= lambda: controller.show_frame(HomePage))
		home_button.pack()
		

class AllPage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Search Peoplesoft", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label1 = ttk.Label(self, text='Search For: ')
		self.all_entry = ttk.Entry(self)
		self.label1.pack()
		self.all_entry.pack()
		self.all_entry.focus_set()
		
		all_button = ttk.Button(self, text='Search', command=self.all_lookup)
		all_button.pack()
		
		export_button = ttk.Button(self, text='Export', command=self.export_lookup)
		export_button.pack()
		
		clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		clear_button.pack()
		
		back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
		home_button.pack()
		
	def all_lookup(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		window = tk.Tk()
		window.geometry('1000x500')
		
		frame = tk.Frame(window)
		frame.pack()
		
		atlas_df = atlas_df.apply(lambda x: x.astype(str).str.upper())
		
		mask = np.column_stack([atlas_df[col].str.contains(self.all_entry.get().upper(), na=False, regex=False) for col in atlas_df])
		all_input = atlas_df.loc[mask.any(axis=1)]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END,all_input)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def export_lookup(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		atlas_df = atlas_df.apply(lambda x: x.astype(str).str.upper())
		
		mask = np.column_stack([atlas_df[col].str.contains(self.all_entry.get().upper(), na=False, regex=False) for col in atlas_df])
		all_input = atlas_df.loc[mask.any(axis=1)]
		
		all_input.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasexport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasexport.csv', 'open')
		
	def clear_textbox(self):
		self.all_entry.delete(0, 'end')
		

class DatePage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Search By Date", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label1 = ttk.Label(self, text='Start Date: ')
		self.date_entry1 = ttk.Entry(self)
		self.label1.pack()
		self.date_entry1.pack()
		self.date_entry1.focus_set()
		
		self.label2 = ttk.Label(self, text='End Date: ')
		self.date_entry2 = ttk.Entry(self)
		self.label2.pack()
		self.date_entry2.pack()
		self.date_entry2.focus_set()
		
		req_button = ttk.Button(self, text='    Search Req Date    ', command=self.req_date)
		req_button.pack()
		
		po_button = ttk.Button(self, text='    Search PO Date     ', command=self.po_date)
		po_button.pack()
		
		rec_button = ttk.Button(self, text=' Search Receipt Date ', command=self.receipt_date)
		rec_button.pack()
		
		voucher_button = ttk.Button(self, text='Search Voucher Date', command=self.voucher_date)
		voucher_button.pack()
		
		clear_button = ttk.Button(self, text='             Clear              ', command=self.clear_textbox)
		clear_button.pack()
		
		back_button = ttk.Button(self, text='              Back              ', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='            Home             ', command= lambda: controller.show_frame(HomePage))
		home_button.pack()
		
	def req_date(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
		atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
		atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
		atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
		
		window = tk.Tk()
		window.geometry('1000x500')
			
		frame = tk.Frame(window)
		frame.pack()
		
		if self.date_entry1.get() == '' and self.date_entry2.get() == '':
			mask = ((atlas_df['Requisition Date'] >= atlas_df['Requisition Date'].min()) & 
			(atlas_df['Requisition Date'] <= atlas_df['Requisition Date'].max()))
		
		elif self.date_entry1.get() == '':
			mask = ((atlas_df['Requisition Date'] >= atlas_df['Requisition Date'].min()) & 
			(atlas_df['Requisition Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		elif self.date_entry2.get() == '':
			mask = ((atlas_df['Requisition Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Requisition Date'] <= atlas_df['Requisition Date'].max()))
			
		else:
			mask = ((atlas_df['Requisition Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Requisition Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		date_lookup = atlas_df.loc[mask]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END, date_lookup)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def po_date(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
		atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
		atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
		atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
		
		window = tk.Tk()
		window.geometry('1000x500')
			
		frame = tk.Frame(window)
		frame.pack()
		
		if self.date_entry1.get() == '' and self.date_entry2.get() == '':
			mask = ((atlas_df['PO Date'] >= atlas_df['PO Date'].min()) & 
			(atlas_df['PO Date'] <= atlas_df['PO Date'].max()))
		
		elif self.date_entry1.get() == '':
			mask = ((atlas_df['PO Date'] >= atlas_df['PO Date'].min()) & 
			(atlas_df['PO Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		elif self.date_entry2.get() == '':
			mask = ((atlas_df['PO Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['PO Date'] <= atlas_df['PO Date'].max()))
			
		else:
			mask = ((atlas_df['PO Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['PO Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		date_lookup = atlas_df.loc[mask]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END, date_lookup)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def receipt_date(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
		atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
		atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
		atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
		
		window = tk.Tk()
		window.geometry('1000x500')
			
		frame = tk.Frame(window)
		frame.pack()
		
		if self.date_entry1.get() == '' and self.date_entry2.get() == '':
			mask = ((atlas_df['Receipt Date'] >= atlas_df['Receipt Date'].min()) & 
			(atlas_df['Receipt Date'] <= atlas_df['Receipt Date'].max()))
		
		elif self.date_entry1.get() == '':
			mask = ((atlas_df['Receipt Date'] >= atlas_df['Receipt Date'].min()) & 
			(atlas_df['Receipt Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		elif self.date_entry2.get() == '':
			mask = ((atlas_df['Receipt Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Receipt Date'] <= atlas_df['Receipt Date'].max()))
			
		else:
			mask = ((atlas_df['Receipt Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Receipt Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		date_lookup = atlas_df.loc[mask]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END, date_lookup)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def voucher_date(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252', dtype=str)

		pd.options.display.max_columns = None
		pd.options.display.max_rows = None
		pd.options.mode.chained_assignment = None
		pd.set_option('display.max_colwidth', -1)
		df = df.apply(lambda x: x.astype(str).str.upper())

		atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
					'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
					'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
					'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
					'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
					'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
					'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
					'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
					'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
					'Total PO Amount','Total Amount Received','Purchase Method']]
		
		atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
		atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
		atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
		atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
		
		window = tk.Tk()
		window.geometry('1000x500')
			
		frame = tk.Frame(window)
		frame.pack()
		
		if self.date_entry1.get() == '' and self.date_entry2.get() == '':
			mask = ((atlas_df['Voucher Entered Date'] >= atlas_df['Voucher Entered Date'].min()) & 
			(atlas_df['Voucher Entered Date'] <= atlas_df['Voucher Entered Date'].max()))
		
		elif self.date_entry1.get() == '':
			mask = ((atlas_df['Voucher Entered Date'] >= atlas_df['Voucher Entered Date'].min()) & 
			(atlas_df['Voucher Entered Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		elif self.date_entry2.get() == '':
			mask = ((atlas_df['Voucher Entered Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Voucher Entered Date'] <= atlas_df['Voucher Entered Date'].max()))
			
		else:
			mask = ((atlas_df['Voucher Entered Date'] >= pd.to_datetime(self.date_entry1.get())) & 
			(atlas_df['Voucher Entered Date'] <= pd.to_datetime(self.date_entry2.get())))
	
		date_lookup = atlas_df.loc[mask]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END, date_lookup)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def clear_textbox(self):
		self.date_entry1.delete(0, 'end')
		self.date_entry2.delete(0, 'end')


class TXDOTPage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Search TXDOTNow", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label1 = ttk.Label(self, text='Search For: ')
		self.txdot_entry = ttk.Entry(self)
		self.label1.pack()
		self.txdot_entry.pack()
		self.txdot_entry.focus_set()
		
		txdot_button = ttk.Button(self, text='Search', command=self.txdot_lookup)
		txdot_button.pack()
		
		clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		clear_button.pack()
		
		back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
		home_button.pack()

	def txdot_lookup(self):
		
		txdotnow_url = 'https://txdotnow.service-now.com/'

		args = ['hide_console', ]
		driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
		driver.get(txdotnow_url)

		driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))

		enter_user = driver.find_element_by_id('user_name')
		enter_user.send_keys(self.controller.fetch_user)
		time.sleep(1)
		enter_password = driver.find_element_by_id('user_password')
		enter_password.send_keys(self.controller.fetch_pwd)

		driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()

		driver.switch_to.default_content()

		WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
		driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(self.txdot_entry.get())
		time.sleep(2)
		driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')

	def clear_textbox(self):
		self.txdot_entry.delete(0, 'end')

class PPTPage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Search PPT", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label1 = ttk.Label(self, text='Search For: ')
		self.ppt_entry = ttk.Entry(self)
		self.label1.pack()
		self.ppt_entry.pack()
		self.ppt_entry.focus_set()

		ppt_button = ttk.Button(self, text='Search', command=self.ppt_lookup)
		ppt_button.pack()
		
		export_button = ttk.Button(self, text='Export', command=self.export_lookup)
		export_button.pack()
		
		clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		clear_button.pack()
		
		back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
		home_button.pack()
		
	def ppt_lookup(self):
		
		ppt_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\pptpending.csv', encoding= 'windows-1252', dtype=str)
		ppt_df = ppt_df[['Current Status', 'Requester', 'Title', 'Task Number', 'Type of Purchase', 'Project Start Date',
						'Expiration Date', 'Number Days to Expire', 'Requisition', 'Req Date', 'Number Days Pending PO', 
						'PRO Buyer', 'PRO ETA Date', 'Number Days PRO ETA Date', 'PRO ETA Notes', 'Comments']]
		
		window = tk.Tk()
		window.geometry('1000x500')
		
		frame = tk.Frame(window)
		frame.pack()
		
		ppt_df = ppt_df.apply(lambda x: x.astype(str).str.upper())
		
		mask = np.column_stack([ppt_df[col].str.contains(self.ppt_entry.get().upper(), na=False, regex=False) for col in ppt_df])
		ppt_input = ppt_df.loc[mask.any(axis=1)]

		scrolly = ttk.Scrollbar(frame, orient='vertical')
		scrollx = ttk.Scrollbar(frame, orient='horizontal')
		scrolly.pack(side='right', fill='y')
		scrollx.pack(side='bottom', fill='x')
		
		self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
		self.t1.config(wrap='none')
		self.t1.pack(fill='both', expand=True)
		self.t1.insert(tk.END,ppt_input)
		
		scrolly.config(command=self.t1.yview)
		scrollx.config(command=self.t1.xview)
		
	def export_lookup(self):
		
		ppt_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\pptpending.csv', encoding= 'windows-1252', dtype=str)
		ppt_df = ppt_df[['Current Status', 'Requester', 'Title', 'Task Number', 'Type of Purchase', 'Project Start Date',
						'Expiration Date', 'Number Days to Expire', 'Requisition', 'Req Date', 'Number Days Pending PO', 
						'PRO Buyer', 'PRO ETA Date', 'Number Days PRO ETA Date', 'PRO ETA Notes', 'Comments']]
		
		ppt_df = ppt_df.apply(lambda x: x.astype(str).str.upper())
		
		mask = np.column_stack([ppt_df[col].str.contains(self.ppt_entry.get().upper(), na=False, regex=False) for col in ppt_df])
		ppt_input = ppt_df.loc[mask.any(axis=1)]
		
		ppt_input.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasexport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasexport.csv', 'open')
		
	def clear_textbox(self):
		self.ppt_entry.delete(0, 'end')


class VendorPage(tk.Frame):
	
	def __init__(self, parent, controller):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
							 ,low_memory=False, dtype=str)

		vendor_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
			'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
			'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
			'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
			'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
			'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
			'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
			'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
			'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
			'Total PO Amount','Total Amount Received']]

		vendor_df = vendor_df.copy()

		vendor_df['PO Vendor Name'] = vendor_df['PO Vendor Name'].astype(str)

		vendor_df1 = vendor_df.loc[vendor_df['Requisitioner Name'].isin(req_list)]
		vendor_df2 = vendor_df1[vendor_df1['PO Number'] != ' ']
		vendors = sorted(vendor_df2['PO Vendor Name'].unique().tolist())
		
		tk.Frame.__init__(self,parent)
		self.var = tk.StringVar()

		label = ttk.Label(self, text="Search Vendors", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller

		self.vendor_list = ttk.Combobox(self, textvariable=self.var, values=vendors)
		self.vendor_list.pack()

		vpo_button = ttk.Button(self, text='     Vendor POs     ', command=self.vendor_po)
		vpo_button.pack()

		vrec_button = ttk.Button(self, text=' Vendor Receipts ', command=self.vendor_rec)
		vrec_button.pack()
		
		export_button = ttk.Button(self, text='  All Vendor Data ', command=self.export_lookup)
		export_button.pack()
		 
		back_button = ttk.Button(self, text='           Back           ', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='          Home         ', command= lambda: controller.show_frame(HomePage))
		home_button.pack()

	def vendor_po(self):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
					 ,low_memory=False, dtype=str)

		vendorpo_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
			'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','PO Number','PO Date',
			'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
			'PO Quantity','PO Amount','PO Vendor Name']]

		mask = np.column_stack([vendorpo_df[col].str.contains(self.var.get(), na=False, regex=False) for col in vendorpo_df])
		vendor_input = vendorpo_df.loc[mask.any(axis=1)]
		unique_po = vendor_input.drop_duplicates(subset='PO Number')
		
		unique_po.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasexport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasexport.csv', 'open')

	def vendor_rec(self):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
			 ,low_memory=False, dtype='str')

		rec_df = df[['Ticket Number','Requisition Name','Requisitioner Name','Item Description','Buyer Name',
			'PO Number','PO Date','PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status',
			'PO Quantity','PO Amount','PO Vendor Name','Receipt ID','Receipt Updated By','Receipt Date',
			'Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date','Voucher Amount',
			'Invoice ID','Invoice Date','Service Start Date','Service End Date','Total PO Amount','Total Amount Received']]

		mask = np.column_stack([vendorrec_df[col].str.contains(self.var.get(), na=False, regex=False) for col in vendorrec_df])
		vendor_rec = vendorrec_df.loc[mask.any(axis=1)]
		
		vendor_rec.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasexport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasexport.csv', 'open')     

	def export_lookup(self):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
			 ,low_memory=False, dtype='str')

		all_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
			'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
			'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
			'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
			'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
			'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
			'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
			'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
			'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
			'Total PO Amount','Total Amount Received']]

		mask = np.column_stack([all_df[col].str.contains(self.var.get(), na=False, regex=False) for col in all_df])
		vendor_all = all_df.loc[mask.any(axis=1)]
		
		vendor_all.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasexport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasexport.csv', 'open')


class PDFPage(tk.Frame):
	
	def __init__(self, parent, controller):
		
		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Search for PDF", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		self.label1 = ttk.Label(self, text='Search For: ')
		self.pdf_entry = ttk.Entry(self)
		self.label1.pack()
		self.pdf_entry.pack()
		self.pdf_entry.focus_set()

		reqdf_button = ttk.Button(self, text='Requisition', command=self.req_pdf)
		reqdf_button.pack()
		
		popdf_button = ttk.Button(self, text='PO', command=self.po_pdf)
		popdf_button.pack()

		invpdf_button = ttk.Button(self, text='    Invoice     ', command=self.inv_pdf)
		invpdf_button.pack()

		pocn_button = ttk.Button(self, text='POCN', command=self.pocn_msg)
		pocn_button.pack()
		
		clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
		clear_button.pack()
		
		back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
		back_button.pack()
		
		home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
		home_button.pack()

	def req_pdf(self):

		os.startfile(r'T:\FISCAL\SHAREPOINT FILING DOC\REQUISITIONS\REQ{}.pdf'.format(self.pdf_entry.get()), 'open')

	def po_pdf(self):

		os.startfile(r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS\6014400000{}.pdf'.format(self.pdf_entry.get()), 'open')

	def inv_pdf(self):

		os.startfile(r'T:\FISCAL\SHAREPOINT FILING DOC\INVOICES\{}.pdf'.format(self.pdf_entry.get()), 'open')

	def pocn_msg(self):

		os.startfile(r'T:\FISCAL\SHAREPOINT FILING DOC\POCN\{}.msg'.format(self.pdf_entry.get()), 'open')

	def clear_textbox(self):
		self.pdf_entry.delete(0, 'end')

		
class ReportPage(tk.Frame, unittest.TestCase):
	
	def __init__(self, parent, controller):

		tk.Frame.__init__(self,parent)
		label = ttk.Label(self, text="Select a Report to Run", font=LARGE_FONT)
		label.pack(pady=10,padx=10)
		self.controller = controller
		
		req_button = ttk.Button(self, text='       Req to PO        ', command= self.req2po)
		req_button.pack()
		
		rec_button = ttk.Button(self, text='Receipt to Voucher', command= self.rec2voucher)
		rec_button.pack()

		newreq_button = ttk.Button(self, text= '       Req Update      ', command = self.req_auto1)
		newreq_button.pack()
		
		newpo_button = ttk.Button(self, text='       PO Update       ', command= self.po_auto)
		newpo_button.pack()

		newrec_button = ttk.Button(self, text='   Receipt Update   ', command= self.rec_auto)
		newrec_button.pack()

		output_button = ttk.Button(self, text='   Individual Stats   ', command= self.pro_output)
		output_button.pack()

		total_button = ttk.Button(self, text='       Team Stats       ', command= self.all_output)
		total_button.pack() 
		
		home_button = ttk.Button(self, text='           Home           ', command= lambda: controller.show_frame(HomePage))
		home_button.pack()
		
	def req2po(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
							 ,low_memory=False)
		
		req_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
				  'Requisition Date', 'Requisition Approval Date', 'Requisition Line Nbr','Item Description', 
				  'Buyer Name','RFQ Status','PO Number','PO Budget Check Status']]

		req_df['Requisition Date'] = pd.to_datetime(req_df['Requisition Date'])
		
		req_df = req_df[req_df['Requisitioner Name'].isin(req_list)].astype(str)
		
		req_df = req_df[(req_df['Requisition ID'] != ' ') & (req_df['PO Number'] == ' ')]

		req_df = req_df[(req_df['PO Budget Check Status'] == 'Valid')]

		req_df = req_df.drop_duplicates('Requisition ID')

		mask = req_df['Requisition Status'].isin(['Approved', 'Line Approved','Pending Approval'])
		req_df = req_df[mask]

		req_df['Requisition Date'] = pd.to_datetime(req_df['Requisition Date'])

		mask1 = req_df['Requisition Date'] >= (pd.to_datetime('today') - datetime.timedelta(days=365))

		req_df = req_df.loc[mask1]
		
		req_df.to_csv(r'T:\IMD Sourcing\Atlas App\Data\req2po.csv', encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\req2po.csv', 'open')
		
	def rec2voucher(self):
		
		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',encoding='windows-1252'
							 ,low_memory=False)
		
		rec_df = df[['Ticket Number','Item Description','Requisitioner Name','PO Status','PO Number','PO Budget Check Status',
					'PO Line','Contract ID','PO Vendor Name','Receipt ID','Receipt Updated By','Receipt Date','Receipt Line',
					'Receipt Quantity','Receipt Status','Voucher ID','Total PO Amount','Total Amount Received','Purchase Method']]

		rec_df['Receipt Date'] = pd.to_datetime(rec_df['Receipt Date'], errors='coerce')

		rec_df['Receipt Age'] = (rec_df['Receipt Date'] - datetime.datetime.today()).dt.days

		# rec_df['Receipt Age'] = pd.to_datetime(rec_df['Receipt Date'].astype(str), format= '%d%m%Y', errors='coerce')
		
		rec_df = rec_df[rec_df['Requisitioner Name'].isin(req_list)].astype(str)
		
		rec_df = rec_df.loc[rec_df['PO Status'].isin(['Dispatched', 'Open'])]

		# rec_df = rec_df[rec_df['PO Budget Check Status'] == 'Valid']
		
		rec_df = rec_df[(rec_df['Receipt ID'] != ' ') & (rec_df['Voucher ID'] == ' ')]
		
		rec_df = rec_df[rec_df['Receipt Status'] == 'Moved to Destination']

		rec_df = rec_df.drop_duplicates('Receipt ID')

		rec_df = rec_df[rec_df['Purchase Method'] != 'CC']

		mask = rec_df['PO Vendor Name'].isin(['AMAZON COM', 'SURVEYMONKEY.COM','AMAZON COM INC'])
		rec_df = rec_df[~mask]
		
		rec_df.to_csv(r'T:\IMD Sourcing\Atlas App\Data\receipt2voucher.csv', encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\receipt2voucher.csv', 'open')  

	def po_auto(self):
		self.p2p_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\P2PALLTEST.csv',  thousands=',', encoding='windows-1252', dtype=str)
		self.p2p_df['Requisition ID'] = self.p2p_df['Requisition ID'].str.lstrip('0')

		self.merge_df(entry_df, pending_po, self.p2p_df)
		self.po_check()
		self.po_print()
		self.po_update()

	def rec_auto(self):

		self.p2p_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\P2PALLTEST.csv',  thousands=',', encoding='windows-1252', dtype=str)
		self.p2p_df['Requisition ID'] = self.p2p_df['Requisition ID'].str.lstrip('0')

		self.mergerec_df(entry_df, pending_po, self.p2p_df)
		self.rec_update()

	def req_auto1(self):

		self.req_check(pending_po)

	def txdot_setup(self):

		txdotnow_url = 'https://txdotnow.service-now.com/'

		args = ['hide_console', ]
		driver_options = webdriver.ChromeOptions()
		driver_options.add_experimental_option('detach',True)
		driver_options.add_argument('--log-level=3')

		self.tx_driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args, options=driver_options)
		self.tx_driver.get(txdotnow_url)

	def txdot_login(self, username, password):
		
		self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))
		WebDriverWait(self.tx_driver, 15).until(EC.presence_of_element_located((By.ID, 'user_name')))
		enter_user = self.tx_driver.find_element_by_id('user_name')
		enter_user.send_keys(username)
		
		time.sleep(1)
		
		enter_password = self.tx_driver.find_element_by_id('user_password')
		enter_password.send_keys(password)
		self.tx_driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()
		
	def ppl_setup(self):

		p2p_url = 'https://fin.txdot.gov/psp/psfinpd/EMPLOYEE/ERP/c/MANAGE_PURCHASE_ORDERS.TX_RUN_TXCPO001.GBL?Folder=MYFAVORITES'

		args = ['hide_console', ]
		driver_options = webdriver.ChromeOptions()
		driver_options.add_experimental_option('detach',True)
		driver_options.add_argument('--log-level=3')

		self.ppl_driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args, options=driver_options)
		self.ppl_driver.get(p2p_url)

	def ppl_login(self, username, password):
		
		self.ppl_driver.switch_to.default_content()
		enter_user = self.ppl_driver.find_element_by_id('userid')
		enter_user.send_keys(username)
		
		time.sleep(1)
		
		enter_password = self.ppl_driver.find_element_by_id('pwd')
		enter_password.send_keys(password)
		
		self.ppl_driver.find_element_by_css_selector('#login > div > div.ps_signinentry > div:nth-child(8) > input').click()

	def req_check(self, x):

		x = x[x['assignment_group'] == 'IMD_PROCUREMENT']

		x = x.reset_index()

		x['Requisition ID'] = x['Requisition ID'].astype('str')

		x.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasreqreport.csv', 
						 encoding='windows-1252', index=False)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasreqreport.csv', 'open')

		row = 0
		for ticket in x['Ticket Number']:

			req_num = x.loc[row,'Requisition ID']
			
			self.txdot_setup()
			self.txdot_login(self.controller.fetch_user, self.controller.fetch_pwd)

			self.tx_driver.switch_to.default_content()
			WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
			self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').clear()
			self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(ticket)

			time.sleep(1)

			self.tx_driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')
			self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))

			time.sleep(1)

			try:
				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sc_task.request_item.comments"]')))
				self.tx_driver.find_element_by_xpath('//*[contains(text(),"' + req_num + '")]')
				row +=1
				self.tx_driver.quit()
			
			except (NoSuchElementException, WebDriverException):

				time.sleep(1)
				self.tx_driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP REQ#: {} has been submitted for this ticket.
				This ticket will be updated when a PO has been issued by PRO Division.'''.format(req_num))

				time.sleep(1)
				self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').clear()
				self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').send_keys('IMD_Pending_PO')

				time.sleep(1)
				WebDriverWait(self.tx_driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="header_add_attachment"]')))
				self.tx_driver.find_element_by_xpath('//*[@id="header_add_attachment"]').click()
				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="attachment"]')))

				upload = self.tx_driver.find_element_by_id('attachFile')
				upload.send_keys(r'T:\FISCAL\SHAREPOINT FILING DOC\REQUISITIONS\REQ{}.pdf'.format(req_num))
				WebDriverWait(self.tx_driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="attachment"]/div/div/header/button')))
				self.tx_driver.find_element_by_xpath('//*[@id="attachment"]/div/div/header/button').click()

				row +=1

	def po_check(self):

		self.atlas_po = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasporeport.csv', encoding='windows-1252', dtype=str)

		newpo_list = []
		row = 0
		for ticket in self.atlas_po['Ticket Number']:

			try:

				po_num = self.atlas_po.loc[row,'PO Number']
				
				self.txdot_setup()
				self.txdot_login(self.controller.fetch_user, self.controller.fetch_pwd)

				time.sleep(3)

				self.tx_driver.switch_to.default_content()
				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').clear()
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(ticket)

				time.sleep(1)

				self.tx_driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')
				self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))

				time.sleep(1)

				try:
					WebDriverWait(self.tx_driver, 3).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sc_task.request_item.comments"]')))
					self.tx_driver.find_element_by_xpath('//*[contains(text(),"' + po_num + '")]')
					row +=1
					self.tx_driver.quit()
				
				except (NoSuchElementException, WebDriverException):

					time.sleep(1)
					newpo_list.append(po_num)
					row +=1
					self.tx_driver.quit()

			except (SessionNotCreatedException):
				print('Session Not Created Exception Error')
				self.tx_driver.quit()
				continue

		self.atlas_po = self.atlas_po[self.atlas_po['PO Number'].isin(newpo_list)]
		
	def merge_df(self, x, y, p):

		x = x.drop_duplicates(subset=['Ticket Number', 'Requisition ID'])

		df3 = pd.merge(x, y, on=['Ticket Number','Requisition ID'])

		self.df4 = pd.merge(p, df3, on=['Requisition ID'])

		self.df4 = self.df4[['assignment_group','Ticket Number', 'Requisition ID', 'PO Number', 'PO Date', 'PO Amount', 'PO Status']]

		self.df4 = self.df4.drop_duplicates(subset=['PO Number', 'Ticket Number'])

		self.df4['PO Amount'] = self.df4['PO Amount'].str.replace(' ','')

		self.df4['PO Amount'] = self.df4['PO Amount'].str.replace(',','')

		self.df4['PO Amount'] = self.df4['PO Amount'].astype(float)

		self.df4 = self.df4.loc[self.df4['PO Status'] == 'Dispatched']

		self.df4 = self.df4[self.df4['PO Date'].notnull()]

		self.df4 = self.df4[(self.df4['PO Amount'] != 0.00)]

		self.df4['PO Date'] = pd.to_datetime(self.df4['PO Date'])

		mask = self.df4['PO Date'] >= (pd.to_datetime('today') - datetime.timedelta(days=5))

		self.df4 = self.df4.loc[mask]

		self.df4.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasporeport.csv', 
						 encoding='windows-1252', index=False)
		
	def po_print(self):

		for self.number in self.atlas_po['PO Number']:

			try:
				
				self.ppl_setup()
				self.ppl_login(self.controller.fetch_user, self.controller.fetch_pwd)

				time.sleep(1)

				self.ppl_driver.switch_to.default_content()
				WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

				time.sleep(1)

				WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="ICTAB_1"]'))).click()

				time.sleep(2)

				self.ppl_driver.find_element_by_css_selector('#RUN_CNTL_PUR_RUN_CNTL_ID').send_keys('PO_{}'.format(self.number))
				WebDriverWait(self.ppl_driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="#ICSearch"]')))
				self.ppl_driver.find_element_by_xpath('//*[@id="#ICSearch"]').click()

				time.sleep(3)    

				try:

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					WebDriverWait(self.ppl_driver, 5).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="#ICSave"]')))
					WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]')))

					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_TO_BU"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]').send_keys('60144')
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_TO_BU"]').send_keys('60144')
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').send_keys(self.number)
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="PRCSRQSTDLG_WRK_LOADPRCSRQSTDLGPB"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADPRCSRQSTDLGPB"]').click()

					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptModFrame_0"]')))
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="#ICSave"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="#ICSave"]').click()

					time.sleep(3)

					WebDriverWait(self.ppl_driver, 30).until(EC.presence_of_element_located((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					count = 1
					instance = (int(self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_DESCR100"]').text.strip('Process Instance:')) + count)
					print(instance)

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]').click()

					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="ICTAB_2"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="ICTAB_2"]').click()

					time.sleep(12)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 30).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))

					# status = self.ppl_driver.find_element_by_id('CDM_LIST_VW_DISTSTATUS$0').text

					timeout = time.time() + 120

					while time.time() < timeout:
						try:
							descr = self.ppl_driver.find_element_by_id('CONTENT_LINK$0').text
							status = self.ppl_driver.find_element_by_id('CDM_LIST_VW_DISTSTATUS$0').text
							print(descr)

							if descr == 'PO_DISPATCH - PO_DISPATCH.pdf':
							  print(descr + 'passed try and if')
							  break

							else:
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								time.sleep(5)
								continue

						except(NoSuchElementException):
							self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
							time.sleep(5)

					else:
						self.ppl_driver.quit()
						continue

					print('successful break')
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					timeout = time.time() + 120

					while time.time() < timeout:

						try:

							if (instance == int(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text) and status == 'Posted' and descr == 'PO_DISPATCH - PO_DISPATCH.pdf'):
								WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								time.sleep(3)
								print(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text)
								break

							else: 
								WebDriverWait(self.ppl_driver, 30).until(EC.presence_of_element_located((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								print(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text)
								time.sleep(3)
								continue

						except(NoSuchElementException, StaleElementReferenceException):

							self.ppl_driver.switch_to.default_content()
							WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
							WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
							self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
							time.sleep(3)
							continue

					else:
						self.ppl_driver.quit()
						continue

					WebDriverWait(self.ppl_driver, 60).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
					time.sleep(5)

					self.i = self.ppl_driver.find_element_by_id('CDM_LIST_VW_CONTENTID$0').text

					time.sleep(1)

					self.download_pdf(self.controller.fetch_user, self.controller.fetch_pwd)

					time.sleep(20)

					self.ppl_driver.quit()

				except(NoSuchElementException, WebDriverException):

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="SEARCH_RESULT1"]'))).click()

					time.sleep(3)
				
					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]')))

					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_TO_BU"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_BUSINESS_UNIT"]').send_keys('60144')
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_TO_BU"]').send_keys('60144')
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').clear()
					self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').send_keys(self.number)
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="PRCSRQSTDLG_WRK_LOADPRCSRQSTDLGPB"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADPRCSRQSTDLGPB"]').click()

					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptModFrame_0"]')))
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="#ICSave"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="#ICSave"]').click()

					time.sleep(3)

					WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					count = 1
					instance = (int(self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_DESCR100"]').text.strip('Process Instance:')) + count)
					print(instance)

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]').click()

					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="ICTAB_2"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="ICTAB_2"]').click()

					time.sleep(12)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 30).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))     

					timeout = time.time() + 120

					while time.time() < timeout:
						# WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
						try:
							descr = self.ppl_driver.find_element_by_id('CONTENT_LINK$0').text
							status = self.ppl_driver.find_element_by_id('CDM_LIST_VW_DISTSTATUS$0').text
							print(descr)

							if descr == 'PO_DISPATCH - PO_DISPATCH.pdf':
							  print(descr + 'passed try and if')
							  break

							else:
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								time.sleep(5)
								continue

						except(NoSuchElementException):
							self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
							time.sleep(5)
							continue

					else:
						self.ppl_driver.quit()
						continue

					print('successful break')
					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
					time.sleep(3)

					self.ppl_driver.switch_to.default_content()
					WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))

					timeout = time.time() + 120

					while time.time() < timeout:

						try:

							if (instance == int(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text) and status == 'Posted' and descr == 'PO_DISPATCH - PO_DISPATCH.pdf'):
								WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								time.sleep(3)
								print(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text)
								break

							else: 
								WebDriverWait(self.ppl_driver, 30).until(EC.presence_of_element_located((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
								self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
								print(self.ppl_driver.find_element_by_id('CDM_LIST_VW_PRCSINSTANCE$0').text)
								time.sleep(3)
								continue

						except(NoSuchElementException, StaleElementReferenceException):

							self.ppl_driver.switch_to.default_content()
							WebDriverWait(self.ppl_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="ptifrmtgtframe"]')))
							WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
							self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
							time.sleep(3)
							continue

					else:
						self.ppl_driver.quit()
						continue

					WebDriverWait(self.ppl_driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
					self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
					time.sleep(5)

					self.i = self.ppl_driver.find_element_by_id('CDM_LIST_VW_CONTENTID$0').text

					time.sleep(1)

					self.download_pdf(self.controller.fetch_user, self.controller.fetch_pwd)

					time.sleep(20)

					self.ppl_driver.quit()

			except (SessionNotCreatedException):
				print('Session Not Created Exception Error')
				self.tx_driver.quit()
				continue
				
	def download_pdf(self, username, password):

		url = 'https://fin.txdot.gov/psreports/psfinpd/{}/PO_DISPATCH.pdf'.format(self.i)
		
		urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

		MAX_RETRIES = 20
		session = requests.Session()
		adapter = requests.adapters.HTTPAdapter(max_retries=MAX_RETRIES)
		session.mount('https://', adapter)
		session.mount('http://', adapter)
		session.max_redirects = 1000
		
		r = session.get(url, auth=(username, password), verify=False, stream=True, headers={'Accept-Encoding': 'identity'})
		r.raw.decode_content = True
		
		with open(r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS\60144{}.pdf'.format(self.number), 'wb') as f:
			shutil.copyfileobj(r.raw, f)
		
	def po_update(self):

		self.atlas_po = self.atlas_po.reset_index()

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasporeport.csv', 'open')

		row = 0
		for ticket in self.atlas_po['Ticket Number']:

			try:
			
				self.txdot_setup()
				self.txdot_login(self.controller.fetch_user, self.controller.fetch_pwd)

				self.tx_driver.switch_to.default_content()
				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').clear()
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(ticket)

				time.sleep(1)

				self.tx_driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')
				self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))

				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.ID, 'sc_task.u_peoplesoft_po_number')))

				try:
				
					if self.atlas_po.loc[row,'PO Number'] in self.tx_driver.find_element_by_id('sc_task.u_peoplesoft_po_number').get_attribute('value'):
						row +=1
						self.tx_driver.quit()
						continue
						
					else:

						self.tx_driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP PO#: {} has been submitted for this ticket. Routing ticket to the proper Assignment Group for receiving of the goods and/or service.'''.format(self.atlas_po.loc[row,'PO Number']))

						time.sleep(1)

						self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').clear()
						self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').send_keys('IMD_Pending_Receipt')

						time.sleep(1)

						self.tx_driver.find_element_by_xpath('//*[@id="sc_task.u_peoplesoft_po_number"]').send_keys('{}'.format(self.atlas_po.loc[row,'PO Number']))

						time.sleep(1)

						self.tx_driver.find_element_by_xpath('//*[@id="header_add_attachment"]').click()
						WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="attachment"]')))

						upload = self.tx_driver.find_element_by_id('attachFile')

						upload.send_keys(r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS\60144{}.pdf'.format(self.atlas_po.loc[row,'PO Number']))

						time.sleep(10)

						self.tx_driver.find_element_by_xpath('//*[@id="attachment"]/div/div/header/button').click()

						time.sleep(1)
						
						row +=1

				except (NoSuchElementException, WebDriverException):
					print('u got error boi')
					row +=1

			except (SessionNotCreatedException):
				print('Session Not Created Exception Error')
				self.tx_driver.quit()
				continue

	def mergerec_df(self, x, y, p):

		x = x.drop_duplicates(subset=['Ticket Number', 'Requisition ID'])

		df3 = pd.merge(x, y, on=['Ticket Number','Requisition ID'])

		self.df4 = pd.merge(p, df3, on=['Requisition ID'])

		self.df4 = self.df4[['Ticket Number', 'Requisition ID', 'PO Number', 'Receipt ID', 'Receipt Date','Total PO Amount','Total Amount Received']]

		self.df4 = self.df4.drop_duplicates('Receipt ID')

		self.df4 = self.df4[self.df4['Receipt Date'].notnull()]

		self.df4['Receipt Date'] = pd.to_datetime(self.df4['Receipt Date'])

		mask = self.df4['Receipt Date'] >= (pd.to_datetime('today') - datetime.timedelta(days=45))

		self.df4 = self.df4.loc[mask]
		
		self.df4.to_csv('T:\\IMD Sourcing\\Atlas App\\Data\\atlasreceiptreport.csv', 
						 encoding='windows-1252', index=False)

	def rec_update(self):
			
		self.update_df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreceiptreport.csv', dtype=str)

		os.startfile(r'T:\IMD Sourcing\Atlas App\Data\atlasreceiptreport.csv', 'open')

		row = 0
		for ticket in self.update_df['Ticket Number']:

			try:

				receipt_num = self.update_df.loc[row,'Receipt ID']
				
				self.txdot_setup()
				self.txdot_login(self.controller.fetch_user, self.controller.fetch_pwd)

				self.tx_driver.switch_to.default_content()
				WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').clear()
				self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(ticket)

				time.sleep(1)

				self.tx_driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')
				WebDriverWait(self.tx_driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="gsft_main"]')))

				time.sleep(1)

				if Select(self.tx_driver.find_element_by_xpath('//*[@id="sc_task.state"]')).first_selected_option.text != 'Closed Complete':

					try:
						WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sc_task.request_item.comments"]')))
						text_found = re.search(receipt_num, self.tx_driver.page_source)
						self.assertNotEqual(text_found, None)
						row +=1
						self.tx_driver.quit()

					
					except (NoSuchElementException, WebDriverException, AssertionError):

						time.sleep(1)

						self.tx_driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP Receipt#: {} has been entered into Peoplesoft.'''.format(receipt_num))

						time.sleep(1)
						
						row +=1
				else:

					row +=1
					self.tx_driver.quit()

			except (SessionNotCreatedException):
				print('Session Not Created Exception Error')
				self.tx_driver.quit()
				continue

	def pro_output(self):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',  thousands=',', encoding='windows-1252', dtype=str)

		req_list = ['Robinson Debra', 'Walton Timothy', 'Rhoads Jay', 'Pope Dominique', 'Jimerson Alexis']

		df['Requisition Date'] = pd.to_datetime(df['Requisition Date'], errors='coerce')
		df['Receipt Date'] = pd.to_datetime(df['Receipt Date'], errors='coerce')

		imd_reqdf = df[df['Requisitioner Name'].isin(req_list)]
		imd_recdf = df[df['Receipt Updated By'].isin(req_list)]

		mask2019 = (imd_reqdf['Requisition Date'] <= pd.to_datetime('today')) & (imd_reqdf['Requisition Date'] >= pd.to_datetime('01/01/2019'))
		req_df =  imd_reqdf.loc[mask2019]
		req_df = req_df.drop_duplicates(['Requisition ID'])
		req_df = req_df.groupby(['Requisitioner Name'], as_index=False).count()
		req_df = req_df[['Requisitioner Name', 'Requisition ID']]

		mask2019 = (imd_recdf['Receipt Date'] <= pd.to_datetime('today')) & (imd_recdf['Receipt Date'] >= pd.to_datetime('01/01/2019'))
		rec_df =  imd_recdf.loc[mask2019]
		rec_df = rec_df.drop_duplicates(['Receipt ID'])
		rec_df = rec_df.groupby(['Receipt Updated By'], as_index=False).count()
		rec_df = rec_df[['Receipt Updated By', 'Receipt ID']]

		requisition_y = req_df['Requisition ID']
		requisition_x = req_df['Requisitioner Name']

		receipt_y = rec_df['Receipt ID']
		receipt_x = rec_df['Receipt Updated By']

		x_values = req_df['Requisitioner Name'].unique()

		ind = np.arange(len(requisition_x))
		width = 0.10

		fig, ax = plt.subplots()

		req_bar = ax.bar(ind - width/2, requisition_y, width, color='SkyBlue', label='Reqs')
		rec_bar = ax.bar(ind + width/2, receipt_y, width, color='IndianRed', label='Receipts')

		ax.set_ylabel('Total')
		ax.set_title('Requisition and Receipt Output')
		ax.set_xticks(ind)
		ax.set_xticklabels(x_values)
		ax.legend()

		def graph_data(data,xpos='center'):

			xpos = xpos.lower()
			ha = {'center':'center', 'right':'left', 'left':'right'}
			offset = {'center':0.5, 'right':0.57, 'left':0.43}

			for df in data:

				height = df.get_height()
				ax.text(df.get_x() + df.get_width()*offset[xpos], 1.01*height, '{}'.format(height), ha=ha[xpos], va='bottom')


		graph_data(req_bar, 'left')
		graph_data(rec_bar, 'right')
		plt.show()

	def all_output(self):

		df = pd.read_csv(r'T:\IMD Sourcing\Atlas App\Data\atlasreporttest.csv',  thousands=',', encoding='windows-1252', dtype=str)

		df['Requisition Date'] = pd.to_datetime(df['Requisition Date'], errors='coerce')
		df['Receipt Date'] = pd.to_datetime(df['Receipt Date'], errors='coerce')
		df['PO Date'] = pd.to_datetime(df['PO Date'], errors='coerce')

		df_sorted = df.sort_values(by='Requisition Date')

		req_df = df_sorted.drop_duplicates(['Requisition ID'])
		rec_df = df_sorted.drop_duplicates(['Receipt ID'])
		po_df = df_sorted.drop_duplicates(['PO Number'])

		req_df['Req Count'] = 1
		req_df['Req Count'] = req_df['Req Count'].cumsum()
		req_df.sort_values(by='Requisition Date')

		rec_df['Rec Count'] = 1
		rec_df['Rec Count'] = rec_df['Rec Count'].cumsum()
		rec_df.sort_values(by='Requisition Date')

		po_df['PO Count'] = 1
		po_df['PO Count'] = po_df['PO Count'].cumsum()
		po_df.sort_values(by='Requisition Date')

		plt.plot(req_df['Requisition Date'], req_df['Req Count'])
		plt.plot(rec_df['Requisition Date'], rec_df['Rec Count'])
		plt.plot(po_df['Requisition Date'], po_df['PO Count'])
		plt.xticks(rotation=45)
		plt.legend(loc=2)
		plt.show()


app = P2P_Gui()
app.mainloop()
