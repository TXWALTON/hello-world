import pandas as pd
import numpy as np
import csv
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from tkinter import *
from tkinter.ttk import *
import os, sys, inspect
import datetime
import webbrowser as wb
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import WebDriverException
from selenium.webdriver.chrome.options import Options
import time
import requests
import urllib3
import shutil

df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False, dtype='str')

pd.options.display.max_columns = None
pd.options.display.max_rows = None
pd.options.mode.chained_assignment = None
pd.set_option('display.max_colwidth', -1)
df = df.apply(lambda x: x.astype(str).str.upper())

atlas_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
            'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
            'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
            'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
            'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
            'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
            'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
            'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
            'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
            'Total PO Amount','Total Amount Received']]

p2p_df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\p2pmerged.csv', encoding='windows-1252', dtype=str)

p2p_df['Requisition ID'] = p2p_df['Requisition ID'].str.lstrip('0')
        
req_list = ['Robinson Debra', 'Walton Timothy', 'Rhoads Jay', 'Garcia Karen', 
                      'Birdwell Diana', 'Eckert Lauren']

req_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
                  'Requisition Date', 'Requisition Approval Date', 'Requisition Line Nbr','Item Description', 
                  'Buyer Name','Comp. Object Req','Accounting Year Req','Department ID Req','Fund Code Req','Class Field Req', 
                  'Project CostinG Business Unit Req','Project ID Req','PC Activity ID Req','PC Resource Type Req','PO Number']]

po_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name',
          'Item Description','Buyer Name','PO Business Unit','PO Number','PO Date','PO Buyer Name','PO Line',
          'Contract ID','PO Status','PO Budget Check Status','PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO',
          'Accounting Year PO','DDO PO','Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
          'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Total PO Amount','Total Amount Received']]

rec_df = df[['Ticket Number','Requisition Name','Item Description','PO Number','PO Line','Contract ID','PO Status',
          'PO Budget Check Status','PO Vendor Name','Receipt ID','Receipt Updated By',
          'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
          'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
          'Total PO Amount','Total Amount Received']]

bal_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Item Description','PO Number',
          'PO Date','PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
          'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
          'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',  
          'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
          'Receipt Date','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
          'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
          'Total PO Amount','Total Amount Received']]

pending_df = pd.read_csv(r'T:\FISCAL\Atlas App\Data\txdotnowpendingpo.csv', encoding='windows-1252', dtype=str)
# pending_df['Requisition ID'] = ''

auto_df = pd.read_csv(r'T:\FISCAL\Atlas App\Data\sctaskauto.csv', dtype='str')

entry_df = pd.read_csv(r'T:\FISCAL\Atlas App\Data\atlasentry.csv', encoding='windows-1252', dtype=str)

ppt_df = pd.read_csv(r'T:\Fiscal\Atlas App\Data\pptpending.csv', encoding= 'windows-1252', dtype=str)

ppt_df = ppt_df[['Current Status', 'Requester', 'Title', 'Task Number', 'Type of Purchase', 'Project Start Date', 'Existing PO Number', 
				'Expiration Date', 'Number Days to Expire', 'Requisition', 'Estimated Cost', 'Req Date', 'Number Days Pending PO', 
				'PRO Buyer', 'PRO ETA Date', 'Number Days PRO ETA Date', 'PRO ETA Notes', 'Comments']]


LARGE_FONT= ("Verdana", 12)
    

class P2P_Gui(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)
        
        tk.Tk.wm_title(self, 'Atlas v1.2')
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        
        for F in (LoginPage, HomePage, EntryPage, SearchPage, ReportPage, DatePage, AllPage, PPTPage, VendorPage, TXDOTPage):

            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(LoginPage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()


class MessageBoxes():
        
    def close_message(self):

        self.close_popup = tk.Tk()
        self.close_popup.wm_title('!')

        label = ttk.Label(self.close_popup, text='Are you sure you want to quit?')
        label.pack(side='top', fill='x', pady=10)

        yes_button = ttk.Button(self.close_popup, text='Yes', command = self.close_program)
        yes_button.pack(side='left')

        no_button = ttk.Button(self.close_popup, text='No', command = self.close_allmessage)
        no_button.pack(side='right')
        
        self.close_popup.mainloop()

    def check_message(self):

        self.check_popup = tk.Tk()
        self.check_popup.wm_title('!')

        label = ttk.Label(self.check_popup, text='Are you sure you want to submit?')
        label.pack(side='top', fill='x', pady=10)

        yes_button = ttk.Button(self.check_popup, text='Yes', command = self.combo_command)
        yes_button.pack(side='left')

        no_button = ttk.Button(self.check_popup, text='No', command = self.check_popup.destroy)
        no_button.pack(side='right')
        
        self.check_popup.mainloop()
        
    def close_allmessage(self):
        
        self.close_popup.destroy()
        self.check_popup.destroy()
        
    def close_program(self):

        app.destroy()
        self.close_allmessage()
        

class LoginPage(tk.Frame, MessageBoxes):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        self.label = ttk.Label(self, text="Login", font=LARGE_FONT)
        self.label.pack(pady=10,padx=10)
        self.controller = controller
        
        self.label = ttk.Label(self, text= 'Enter Username')
        self.label.pack()
        self.user_entry = ttk.Entry(self)
        self.user_entry.pack()
        self.user_entry.focus_set()
        
        self.label = ttk.Label(self, text= 'Enter Password')
        self.label.pack()
        self.pwd_entry = ttk.Entry(self, show='*')
        self.pwd_entry.pack()
        self.pwd_entry.focus_set()
        
        enter_button = ttk.Button(self, text='Enter', command= self.combo_function)
        enter_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        quit_button = ttk.Button(self, text='Exit', command= self.close_message)
        quit_button.pack()
        
    def clear_textbox(self):
        
        self.user_entry.delete(0, 'end')
        self.pwd_entry.delete(0, 'end')
        
    def combo_function(self):
        
        self.controller.fetch_user = self.user_entry.get()
        self.controller.fetch_pwd = self.pwd_entry.get()
        self.clear_textbox()
        self.controller.show_frame(HomePage)
        
        
class HomePage(tk.Frame, MessageBoxes):

    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text='Atlas v1.2', font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        entry_button = ttk.Button(self, text='New Entry', command= lambda: controller.show_frame(EntryPage))
        entry_button.pack()
        
        lookup_button = ttk.Button(self, text='Search', command= lambda: controller.show_frame(SearchPage))
        lookup_button.pack()
        
        report_button = ttk.Button(self, text='Run Report', command= lambda: controller.show_frame(ReportPage))
        report_button.pack()
        
        login_button = ttk.Button(self, text='Login', command= lambda: controller.show_frame(LoginPage))
        login_button.pack()
        
        quit_button = ttk.Button(self, text='Exit', command= self.close_message)
        quit_button.pack()
        

class EntryPage(tk.Frame, MessageBoxes):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        self.label = ttk.Label(self, text=" New Entry  ", font=LARGE_FONT)
        self.label.pack(pady=10,padx=10)
        self.controller = controller

        self.label = ttk.Label(self, text= 'Enter Ticket Number')
        self.label.pack()
        self.entry1 = ttk.Entry(self)
        self.entry1.pack()
        self.entry1.focus_set()
    
        self.label = ttk.Label(self, text= 'Enter Requisition ID')
        self.label.pack()
        self.entry2 = ttk.Entry(self)
        self.entry2.pack()
        self.entry2.focus_set()
        
        self.enter_button = ttk.Button(self, text='Enter', command= self.check_message)
        self.enter_button.pack()
        
        self.clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        self.clear_button.pack()
        
        self.home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        self.home_button.pack()

    def write_file(self):
        
        with open ('T:\\FISCAL\\Atlas App\\Data\\atlasentry.csv', 'a', newline='') as f:
            w = csv.writer(f, quoting=csv.QUOTE_ALL, delimiter=',')
            
            w.writerow([self.entry1.get().upper(), self.entry2.get().upper()])
            
    def merge_file(self):
        
        df1 = pd.read_csv(r'T:\FISCAL\Atlas App\Data\atlasentry.csv', 
                          encoding='windows-1252', dtype=str)
        
        df1 = df1.drop_duplicates(subset=['Ticket Number', 'Requisition ID'])
        
        df3 = p2p_df.loc[p2p_df['Requisitioner Name'].isin(req_list)]

        df4 = pd.merge(df1, df3, on='Requisition ID', how='right')

        df4.to_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv', encoding='windows-1252', index=False)
        
    def clear_textbox(self):
        
        self.entry1.delete(0, 'end')
        self.entry2.delete(0, 'end')
        
    def req_auto(self):
        
        txdotnow_url = 'https://txdotnow.service-now.com/'

        args = ['hide_console', ]
        driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
        driver.get(txdotnow_url)

        driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))

        enter_user = driver.find_element_by_id('user_name')
        enter_user.send_keys(self.controller.fetch_user)
        time.sleep(1)
        enter_password = driver.find_element_by_id('user_password')
        enter_password.send_keys(self.controller.fetch_pwd)

        driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()

        driver.switch_to.default_content()

        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
        driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(self.entry1.get())
        time.sleep(2)
        driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')

        driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))
        driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP REQ#: {} has been submitted for this ticket.
        This ticket will be updated when a PO has been issued by PRO Division.'''.format(self.entry2.get()))

        driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').clear()
        driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').send_keys('IMD_Pending_PO')

        time.sleep(1)
        driver.find_element_by_xpath('//*[@id="sc_task.u_peoplesoft_erq"]').send_keys('00000{}'.format(self.entry2.get()))

        time.sleep(1)
        driver.find_element_by_xpath('//*[@id="header_add_attachment"]').click()
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="attachment"]')))

        upload = driver.find_element_by_id('attachFile')
        upload.send_keys(r'T:\FISCAL\SHAREPOINT FILING DOC\REQUISITIONS\REQ{}.pdf'.format(self.entry2.get()))

        driver.find_element_by_xpath('//*[@id="attachment"]/div/div/header/button').click()
        
    def combo_command(self):
        
        self.check_popup.destroy()
        self.write_file()
        self.merge_file()
        self.req_auto()
        self.clear_textbox()
        
        
class SearchPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Select Search Option", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        all_button = ttk.Button(self, text=' Search Peoplesoft ', command= lambda: controller.show_frame(AllPage))
        all_button.pack()
        
        date_button = ttk.Button(self, text='    Search By Date   ', command= lambda: controller.show_frame(DatePage))
        date_button.pack()

        txdot_button = ttk.Button(self, text='Search TXDOTNow', command= lambda: controller.show_frame(TXDOTPage))
        txdot_button.pack()
 
        ppt_button = ttk.Button(self, text='       Search PPT       ', command= lambda: controller.show_frame(PPTPage))
        ppt_button.pack()

        vendor_button = ttk.Button(self, text='   Search Vendors   ', command= lambda: controller.show_frame(VendorPage))
        vendor_button.pack()
        
        home_button = ttk.Button(self, text='          Home            ', 
                                 command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        

class AllPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Search Peoplesoft", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        self.label1 = ttk.Label(self, text='Search For: ')
        self.all_entry = ttk.Entry(self)
        self.label1.pack()
        self.all_entry.pack()
        self.all_entry.focus_set()
        
        all_button = ttk.Button(self, text='Search', command=self.all_lookup)
        all_button.pack()
        
        export_button = ttk.Button(self, text='Export', command=self.export_lookup)
        export_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
    def all_lookup(self):
        
        global atlas_df
        
        window = tk.Tk()
        window.geometry('1000x500')
        
        frame = tk.Frame(window)
        frame.pack()
        
        atlas_df = atlas_df.apply(lambda x: x.astype(str).str.upper())
        
        mask = np.column_stack([atlas_df[col].str.contains(self.all_entry.get().upper(), na=False, regex=False) for col in atlas_df])
        all_input = atlas_df.loc[mask.any(axis=1)]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END,all_input)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def export_lookup(self):
        
        global atlas_df
        
        atlas_df = atlas_df.apply(lambda x: x.astype(str).str.upper())
        
        mask = np.column_stack([atlas_df[col].str.contains(self.all_entry.get().upper(), na=False, regex=False) for col in atlas_df])
        all_input = atlas_df.loc[mask.any(axis=1)]
        
        all_input.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasexport.csv', 
                         encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasexport.csv', 'open')
        
    def clear_textbox(self):
        self.all_entry.delete(0, 'end')
        

class DatePage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Search By Date", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        self.label1 = ttk.Label(self, text='Start Date: ')
        self.date_entry1 = ttk.Entry(self)
        self.label1.pack()
        self.date_entry1.pack()
        self.date_entry1.focus_set()
        
        self.label2 = ttk.Label(self, text='End Date: ')
        self.date_entry2 = ttk.Entry(self)
        self.label2.pack()
        self.date_entry2.pack()
        self.date_entry2.focus_set()
        
        req_button = ttk.Button(self, text='    Search Req Date    ', command=self.req_date)
        req_button.pack()
        
        po_button = ttk.Button(self, text='    Search PO Date     ', command=self.po_date)
        po_button.pack()
        
        rec_button = ttk.Button(self, text=' Search Receipt Date ', command=self.receipt_date)
        rec_button.pack()
        
        voucher_button = ttk.Button(self, text='Search Voucher Date', command=self.voucher_date)
        voucher_button.pack()
        
        clear_button = ttk.Button(self, text='             Clear              ', command=self.clear_textbox)
        clear_button.pack()
        
        back_button = ttk.Button(self, text='              Back              ', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='            Home             ', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
    def req_date(self):
        
        global atlas_df
        
        atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
        atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
        atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
        atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
        
        window = tk.Tk()
        window.geometry('1000x500')
            
        frame = tk.Frame(window)
        frame.pack()
        
        if self.date_entry1.get() == '' and self.date_entry2.get() == '':
            mask = ((atlas_df['Requisition Date'] >= atlas_df['Requisition Date'].min()) & 
            (atlas_df['Requisition Date'] <= atlas_df['Requisition Date'].max()))
        
        elif self.date_entry1.get() == '':
            mask = ((atlas_df['Requisition Date'] >= atlas_df['Requisition Date'].min()) & 
            (atlas_df['Requisition Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        elif self.date_entry2.get() == '':
            mask = ((atlas_df['Requisition Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Requisition Date'] <= atlas_df['Requisition Date'].max()))
            
        else:
            mask = ((atlas_df['Requisition Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Requisition Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        date_lookup = atlas_df.loc[mask]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END, date_lookup)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def po_date(self):
        
        global atlas_df
        
        atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
        atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
        atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
        atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
        
        window = tk.Tk()
        window.geometry('1000x500')
            
        frame = tk.Frame(window)
        frame.pack()
        
        if self.date_entry1.get() == '' and self.date_entry2.get() == '':
            mask = ((atlas_df['PO Date'] >= atlas_df['PO Date'].min()) & 
            (atlas_df['PO Date'] <= atlas_df['PO Date'].max()))
        
        elif self.date_entry1.get() == '':
            mask = ((atlas_df['PO Date'] >= atlas_df['PO Date'].min()) & 
            (atlas_df['PO Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        elif self.date_entry2.get() == '':
            mask = ((atlas_df['PO Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['PO Date'] <= atlas_df['PO Date'].max()))
            
        else:
            mask = ((atlas_df['PO Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['PO Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        date_lookup = atlas_df.loc[mask]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END, date_lookup)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def receipt_date(self):
        
        global atlas_df
        
        atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
        atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
        atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
        atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
        
        window = tk.Tk()
        window.geometry('1000x500')
            
        frame = tk.Frame(window)
        frame.pack()
        
        if self.date_entry1.get() == '' and self.date_entry2.get() == '':
            mask = ((atlas_df['Receipt Date'] >= atlas_df['Receipt Date'].min()) & 
            (atlas_df['Receipt Date'] <= atlas_df['Receipt Date'].max()))
        
        elif self.date_entry1.get() == '':
            mask = ((atlas_df['Receipt Date'] >= atlas_df['Receipt Date'].min()) & 
            (atlas_df['Receipt Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        elif self.date_entry2.get() == '':
            mask = ((atlas_df['Receipt Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Receipt Date'] <= atlas_df['Receipt Date'].max()))
            
        else:
            mask = ((atlas_df['Receipt Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Receipt Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        date_lookup = atlas_df.loc[mask]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END, date_lookup)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def voucher_date(self):
        
        global atlas_df
        
        atlas_df['Requisition Date'] = pd.to_datetime(atlas_df['Requisition Date'])
        atlas_df['PO Date'] = pd.to_datetime(atlas_df['PO Date'])
        atlas_df['Receipt Date'] = pd.to_datetime(atlas_df['Receipt Date'])
        atlas_df['Voucher Entered Date'] = pd.to_datetime(atlas_df['Voucher Entered Date'])
        
        window = tk.Tk()
        window.geometry('1000x500')
            
        frame = tk.Frame(window)
        frame.pack()
        
        if self.date_entry1.get() == '' and self.date_entry2.get() == '':
            mask = ((atlas_df['Voucher Entered Date'] >= atlas_df['Voucher Entered Date'].min()) & 
            (atlas_df['Voucher Entered Date'] <= atlas_df['Voucher Entered Date'].max()))
        
        elif self.date_entry1.get() == '':
            mask = ((atlas_df['Voucher Entered Date'] >= atlas_df['Voucher Entered Date'].min()) & 
            (atlas_df['Voucher Entered Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        elif self.date_entry2.get() == '':
            mask = ((atlas_df['Voucher Entered Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Voucher Entered Date'] <= atlas_df['Voucher Entered Date'].max()))
            
        else:
            mask = ((atlas_df['Voucher Entered Date'] >= pd.to_datetime(self.date_entry1.get())) & 
            (atlas_df['Voucher Entered Date'] <= pd.to_datetime(self.date_entry2.get())))
    
        date_lookup = atlas_df.loc[mask]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END, date_lookup)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def clear_textbox(self):
        self.date_entry1.delete(0, 'end')
        self.date_entry2.delete(0, 'end')


class TXDOTPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Search TXDOTNow", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        self.label1 = ttk.Label(self, text='Search For: ')
        self.txdot_entry = ttk.Entry(self)
        self.label1.pack()
        self.txdot_entry.pack()
        self.txdot_entry.focus_set()
        
        txdot_button = ttk.Button(self, text='Search', command=self.txdot_lookup)
        txdot_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()

    def txdot_lookup(self):
        
        txdotnow_url = 'https://txdotnow.service-now.com/'

        args = ['hide_console', ]
        driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
        driver.get(txdotnow_url)

        driver.switch_to.frame(driver.find_element_by_xpath('//*[@id="gsft_main"]'))

        enter_user = driver.find_element_by_id('user_name')
        enter_user.send_keys(self.controller.fetch_user)
        time.sleep(1)
        enter_password = driver.find_element_by_id('user_password')
        enter_password.send_keys(self.controller.fetch_pwd)

        driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()

        driver.switch_to.default_content()

        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
        driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(self.txdot_entry.get())
        time.sleep(2)
        driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')

    def clear_textbox(self):
        self.txdot_entry.delete(0, 'end')

class PPTPage(tk.Frame):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Search PPT", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        self.label1 = ttk.Label(self, text='Search For: ')
        self.ppt_entry = ttk.Entry(self)
        self.label1.pack()
        self.ppt_entry.pack()
        self.ppt_entry.focus_set()

        ppt_button = ttk.Button(self, text='Search', command=self.ppt_lookup)
        ppt_button.pack()
        
        export_button = ttk.Button(self, text='Export', command=self.export_lookup)
        export_button.pack()
        
        clear_button = ttk.Button(self, text='Clear', command=self.clear_textbox)
        clear_button.pack()
        
        back_button = ttk.Button(self, text='Back', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='Home', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
    def ppt_lookup(self):
        
        global ppt_df
        
        window = tk.Tk()
        window.geometry('1000x500')
        
        frame = tk.Frame(window)
        frame.pack()
        
        ppt_df = ppt_df.apply(lambda x: x.astype(str).str.upper())
        
        mask = np.column_stack([ppt_df[col].str.contains(self.ppt_entry.get().upper(), na=False, regex=False) for col in ppt_df])
        ppt_input = ppt_df.loc[mask.any(axis=1)]

        scrolly = ttk.Scrollbar(frame, orient='vertical')
        scrollx = ttk.Scrollbar(frame, orient='horizontal')
        scrolly.pack(side='right', fill='y')
        scrollx.pack(side='bottom', fill='x')
        
        self.t1=tk.Text(frame,height=500,width=1000, wrap='none', xscrollcommand=scrollx.set, yscrollcommand=scrolly.set)
        self.t1.config(wrap='none')
        self.t1.pack(fill='both', expand=True)
        self.t1.insert(tk.END,ppt_input)
        
        scrolly.config(command=self.t1.yview)
        scrollx.config(command=self.t1.xview)
        
    def export_lookup(self):
        
        global ppt_df
        
        ppt_df = ppt_df.apply(lambda x: x.astype(str).str.upper())
        
        mask = np.column_stack([ppt_df[col].str.contains(self.ppt_entry.get().upper(), na=False, regex=False) for col in ppt_df])
        ppt_input = ppt_df.loc[mask.any(axis=1)]
        
        ppt_input.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasexport.csv', 
                         encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasexport.csv', 'open')
        
    def clear_textbox(self):
        self.ppt_entry.delete(0, 'end')


class VendorPage(tk.Frame):
    
    def __init__(self, parent, controller):

        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False, dtype=str)

        vendor_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
            'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
            'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
            'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
            'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
            'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
            'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
            'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
            'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
            'Total PO Amount','Total Amount Received']]

        vendor_df['PO Vendor Name'] = vendor_df['PO Vendor Name'].astype(str)

        vendor_df1 = vendor_df.loc[vendor_df['Requisitioner Name'].isin(req_list)]
        vendor_df2 = vendor_df1[vendor_df1['PO Number'] != ' ']
        vendors = sorted(vendor_df2['PO Vendor Name'].unique().tolist())
        
        tk.Frame.__init__(self,parent)
        self.var = tk.StringVar()

        label = ttk.Label(self, text="Search Vendors", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller

        # self.vendor_list = ttk.OptionMenu(self, self.var, vendors[1], *vendors)
        # self.vendor_list.pack()

        self.vendor_list = ttk.Combobox(self, textvariable=self.var, values=vendors)
        self.vendor_list.pack()

        vpo_button = ttk.Button(self, text='     Vendor POs     ', command=self.vendor_po)
        vpo_button.pack()

        vrec_button = ttk.Button(self, text=' Vendor Receipts ', command=self.vendor_rec)
        vrec_button.pack()
        
        export_button = ttk.Button(self, text='  All Vendor Data ', command=self.export_lookup)
        export_button.pack()
         
        back_button = ttk.Button(self, text='           Back           ', command= lambda: controller.show_frame(SearchPage))
        back_button.pack()
        
        home_button = ttk.Button(self, text='          Home         ', command= lambda: controller.show_frame(HomePage))
        home_button.pack()

    def vendor_po(self):

        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                     ,low_memory=False, dtype=str)

        po_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
            'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','PO Number','PO Date',
            'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
            'PO Quantity','PO Amount','PO Vendor Name']]

        mask = np.column_stack([po_df[col].str.contains(self.var.get(), na=False, regex=False) for col in po_df])
        vendor_input = po_df.loc[mask.any(axis=1)]
        unique_po = vendor_input.drop_duplicates(subset='PO Number')
        
        unique_po.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasexport.csv', 
                         encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasexport.csv', 'open')

    def vendor_rec(self):

        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
             ,low_memory=False, dtype='str')

        rec_df = df[['Ticket Number','Requisition Name','Requisitioner Name','Item Description','Buyer Name',
            'PO Number','PO Date','PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status',
            'PO Quantity','PO Amount','PO Vendor Name','Receipt ID','Receipt Updated By','Receipt Date',
            'Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date','Voucher Amount',
            'Invoice ID','Invoice Date','Service Start Date','Service End Date','Total PO Amount','Total Amount Received']]

        mask = np.column_stack([rec_df[col].str.contains(self.var.get(), na=False, regex=False) for col in rec_df])
        vendor_rec = rec_df.loc[mask.any(axis=1)]
        # unique_rec = vendor_input.drop_duplicates(subset='PO Number')
        
        vendor_rec.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasexport.csv', 
                         encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasexport.csv', 'open')     

    def export_lookup(self):

        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
             ,low_memory=False, dtype='str')

        all_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
            'Requisition Date','Requisition Line Nbr','Item Description','Buyer Name','RFQ Status',
            'RFQ Open Date','RFQ Dispatch Date','PO Business Unit','PO Number','PO Date',
            'PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
            'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
            'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
            'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
            'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
            'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
            'Total PO Amount','Total Amount Received']]

        mask = np.column_stack([all_df[col].str.contains(self.var.get(), na=False, regex=False) for col in all_df])
        vendor_all = all_df.loc[mask.any(axis=1)]
        
        vendor_all.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasexport.csv', 
                         encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasexport.csv', 'open')

        
class ReportPage(LoginPage):
    
    def __init__(self, parent, controller):
        
        tk.Frame.__init__(self,parent)
        label = ttk.Label(self, text="Select a Report to Run", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.controller = controller
        
        req_button = ttk.Button(self, text='       Req to PO        ', command= self.req2po)
        req_button.pack()

        req30_button = ttk.Button(self, text='      30 Day Reqs      ', command= self.req30)
        req30_button.pack()
                                  
        po_button = ttk.Button(self, text='     PO to Receipt    ', command= self.po2rec)
        po_button.pack()
        
        rec_button = ttk.Button(self, text='Receipt to Voucher', command= self.rec2voucher)
        rec_button.pack()
        
        bal_button = ttk.Button(self, text='Remaining Balance', command= self.remainingbal)
        bal_button.pack()
        
        newpo_button = ttk.Button(self, text='    New PO Issued   ', command= self.po_auto)
        newpo_button.pack()
        
        home_button = ttk.Button(self, text='           Home           ', command= lambda: controller.show_frame(HomePage))
        home_button.pack()
        
    def req2po(self):
        
        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False)
        
        req_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
                  'Requisition Date', 'Requisition Approval Date', 'Requisition Line Nbr','Item Description', 
                  'Buyer Name','Comp. Object Req','Accounting Year Req','Department ID Req','Fund Code Req','Class Field Req', 
                  'Project CostinG Business Unit Req','Project ID Req','PC Activity ID Req','PC Resource Type Req','PO Number']]
        
        req_df = req_df[req_df['Requisitioner Name'].isin(req_list)].astype(str)
        
        req_df = req_df[(req_df['Requisition ID'] != ' ') & (req_df['PO Number'] == ' ')]
        
        req_df.to_csv(r'T:\FISCAL\Atlas App\Data\req2po.csv', encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\req2po.csv', 'open')

    def req30(self):

        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
        ,low_memory=False, dtype='str')

        req_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Requisition Status',
        'Requisition Date', 'Requisition Approval Date', 'Requisition Line Nbr','Item Description', 
        'Buyer Name','Comp. Object Req','Accounting Year Req','Department ID Req','Fund Code Req','Class Field Req', 
        'Project CostinG Business Unit Req','Project ID Req','PC Activity ID Req','PC Resource Type Req','PO Number', 'PO Budget Check Status']]

        
        req_df['Requisition Date'] = pd.to_datetime(req_df['Requisition Date'])
        today = datetime.datetime.today()
        req_df['Requisition Age'] = (today - req_df['Requisition Date']).dt.days

        req_df = req_df[(req_df['Requisition Status'] == 'Approved')]

        req_df = req_df[(req_df['PO Budget Check Status'] == 'Valid')]

        req_df = req_df[(req_df['Requisition ID'] != ' ') & (req_df['PO Number'] == ' ')]

        req_df = req_df[(req_df['Requisition Age'] < 365)]

        req_df = req_df.drop_duplicates(subset='Requisition ID')

        req30_df = req_df[(req_df['Requisition Age'] >= 30)]

        req30_df.to_csv(r'T:\FISCAL\Atlas App\Data\req30.csv', encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\req30.csv', 'open')
        
    def po2rec(self):
        
        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False)
        
        po_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name',
          'Item Description','Buyer Name','PO Business Unit','PO Number','PO Date','PO Buyer Name','PO Line',
          'Contract ID','PO Status','PO Budget Check Status','PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO',
          'Accounting Year PO','DDO PO','Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',
          'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Total PO Amount','Total Amount Received']]
        
        po_df = po_df[po_df['Requisitioner Name'].isin(req_list)].astype(str)
        
        po_df = po_df.loc[po_df['PO Status'].isin(['Dispatched', 'Open'])]
        
        po_df = po_df[(po_df['PO Number'] != ' ') & (po_df['Receipt ID'] == ' ')]
        
        po_df.to_csv(r'T:\FISCAL\Atlas App\Data\po2receipt.csv', index=False)

        os.startfile('T:\FISCAL\Atlas App\Data\po2receipt.csv', 'open')
        
    def rec2voucher(self):
        
        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False)
        
        rec_df = df[['Ticket Number','Requisition Name','Requisitioner Name','Item Description','PO Number','PO Line',
                     'Contract ID','PO Status','PO Budget Check Status','PO Vendor Name','Receipt ID','Receipt Updated By',
                     'Receipt Date','Receipt Line','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
                     'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
                     'Total PO Amount','Total Amount Received']]
        
        rec_df = rec_df[rec_df['Requisitioner Name'].isin(req_list)].astype(str)
        
        rec_df = rec_df.loc[rec_df['PO Status'].isin(['Dispatched', 'Open'])]
        
        rec_df = rec_df[(rec_df['Receipt ID'] != ' ') & (rec_df['Voucher ID'] == ' ')]
        
        rec_df = rec_df[rec_df['Receipt Status'] != 'Canceled']
        
        rec_df.to_csv(r'T:\FISCAL\Atlas App\Data\receipt2voucher.csv', encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\receipt2voucher.csv', 'open')
        
    def remainingbal(self):
        
        df = pd.read_csv(r'C:\Users\TWALTON\Desktop\p2p_all_ddo\Test\atlasreport.csv',encoding='windows-1252'
                             ,low_memory=False)
        
        bal_df = df[['Ticket Number','Requisition ID','Requisition Name','Requisitioner Name','Item Description','PO Number',
          'PO Date','PO Buyer Name','PO Line','Contract ID','Contract Line Number','PO Status','PO Budget Check Status',
          'PO Quantity','PO Amount','PO Vendor Name','Comp. Object PO','Accounting Year PO','DDO PO',
          'Department ID PO','Fund Code PO','Class Field PO','Project CostinG Business Unit PO',  
          'Project ID PO','PC Activity ID PO','PC Resource Type PO','Receipt ID','Receipt Updated By',
          'Receipt Date','Receipt Quantity','Receipt Status','Voucher ID','Voucher Entered Date',
          'Voucher Amount','Invoice ID','Invoice Date','Service Start Date','Service End Date',
          'Total PO Amount','Total Amount Received']]
        
        bal_df = bal_df[bal_df['Requisitioner Name'].isin(req_list)].astype(str)
        
        bal_df = bal_df[(bal_df['Total PO Amount'] != bal_df['Total Amount Received'])]
        
        bal_df = bal_df.loc[bal_df['PO Status'].isin(['Dispatched', 'Open'])]
        
        bal_df = bal_df[(bal_df['Total PO Amount'] != bal_df['Total Amount Received'])]
        
        bal_df.to_csv(r'T:\FISCAL\Atlas App\Data\remainingbalance.csv', encoding='windows-1252', index=False)

        os.startfile(r'T:\FISCAL\Atlas App\Data\remainingbalance.csv', 'open')   

    def po_auto(self):
    
        self.merge_df(entry_df, pending_df, p2p_df)
        self.po_print()
        self.po_update()
        
    def txdot_setup(self):

        txdotnow_url = 'https://txdotnow.service-now.com/'

        args = ['hide_console', ]
        self.tx_driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
        self.tx_driver.get(txdotnow_url)

    def txdot_login(self, username, password):
        
        self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))
        enter_user = self.tx_driver.find_element_by_id('user_name')
        enter_user.send_keys(username)
        
        time.sleep(1)
        
        enter_password = self.tx_driver.find_element_by_id('user_password')
        enter_password.send_keys(password)
        self.tx_driver.find_element_by_css_selector('.pull-right.btn.btn-primary').click()
        
    def ppl_setup(self):

        p2p_url = 'https://fin.txdot.gov/psp/psfinpd/EMPLOYEE/ERP/c/MANAGE_PURCHASE_ORDERS.TX_RUN_TXCPO001.GBL?Folder=MYFAVORITES'

        args = ['hide_console', ]
        self.ppl_driver = webdriver.Chrome(executable_path='C:\\Users\\Public\\chromedriver.exe', service_args=args)
        self.ppl_driver.get(p2p_url)

    def ppl_login(self, username, password):
        
        self.ppl_driver.switch_to.default_content()
        enter_user = self.ppl_driver.find_element_by_id('userid')
        enter_user.send_keys(username)
        
        time.sleep(1)
        
        enter_password = self.ppl_driver.find_element_by_id('pwd')
        enter_password.send_keys(password)
        
        self.ppl_driver.find_element_by_css_selector('#login > div > div.ps_signinentry > div:nth-child(8) > input').click()
        
    def merge_df(self, x, y, p):

        x = x.drop_duplicates(subset=['Ticket Number', 'Requisition ID'])

        y = y.rename(columns = {'number':'Ticket Number'})

        df3 = pd.merge(x, y, on=['Ticket Number'])

        self.df4 = pd.merge(p, df3, on=['Requisition ID'])

        self.df4 = self.df4[['Ticket Number', 'Requisition ID', 'PO Number', 'PO Date']]

        self.df4 = self.df4.drop_duplicates('PO Number')

        self.df4 = self.df4[self.df4['PO Date'].notnull()]

        self.df4['PO Date'] = pd.to_datetime(self.df4['PO Date'])

        mask = self.df4['PO Date'] >= (pd.to_datetime('today') - datetime.timedelta(days=5))

        self.df4 = self.df4.loc[mask]
        
        self.df4.to_csv('T:\\FISCAL\\Atlas App\\Data\\atlasporeport.csv', 
                         encoding='windows-1252', index=False)
        
    def po_print(self):
        
        po_list = []
        for po in self.df4['PO Number']:
            po_list.append(po)
            
        for self.number in po_list:
            
            try:
                
                self.ppl_setup()
                self.ppl_login(self.controller.fetch_user, self.controller.fetch_pwd)

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))

                time.sleep(1)

                self.ppl_driver.find_element_by_css_selector('#RUN_CNTL_PUR_RUN_CNTL_ID').send_keys('PO_AUTO')
                self.ppl_driver.find_element_by_xpath('//*[@id="#ICSearch"]').click()

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))

                time.sleep(1)

                self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').clear()
                self.ppl_driver.find_element_by_xpath('//*[@id="RUN_CNTL_PUR_PO_ID"]').send_keys(self.number)
                self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADPRCSRQSTDLGPB"]').click()

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptModFrame_0"]'))
                WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="#ICSave"]')))
                self.ppl_driver.find_element_by_xpath('//*[@id="#ICSave"]').click()

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))
                WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]')))
                self.ppl_driver.find_element_by_xpath('//*[@id="PRCSRQSTDLG_WRK_LOADRPTLIST"]').click()

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))
                WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="ICTAB_2"]')))
                self.ppl_driver.find_element_by_xpath('//*[@id="ICTAB_2"]').click()

                time.sleep(1)

                self.ppl_driver.switch_to.default_content()
                self.ppl_driver.switch_to.frame(self.ppl_driver.find_element_by_xpath('//*[@id="ptifrmtgtframe"]'))
                WebDriverWait(self.ppl_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="CDM_WRK_REFRESH_BTN"]')))
                self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
                time.sleep(3)
                self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
                time.sleep(3)
                self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
                time.sleep(3)
                self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
                time.sleep(3)
                self.ppl_driver.find_element_by_xpath('//*[@id="CDM_WRK_REFRESH_BTN"]').click()
                time.sleep(3)
                self.i = self.ppl_driver.find_element_by_id('CDM_LIST_VW_CONTENTID$0').text

                time.sleep(2)

                self.download_pdf(self.controller.fetch_user, self.controller.fetch_pwd)

                time.sleep(15)

                self.ppl_driver.close()
                
            except (NoSuchElementException, WebDriverException):
                time.sleep(3)
                pass
                
    def download_pdf(self, username, password):

        url = 'https://fin.txdot.gov/psreports/psfinpd/{}/PO_DISPATCH.pdf'.format(self.i)
        dl_dir = r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS'
        
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        r = requests.get(url, auth=(username, password), verify=False, stream=True)
        r.raw.decode_content = True
        
        with open(r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS\60144{}.pdf'.format(self.number), 'wb') as f:
            shutil.copyfileobj(r.raw, f)
        
    def po_update(self):
        
        self.update_df = pd.read_csv(r'T:\FISCAL\Atlas App\Data\atlasporeport.csv', dtype=str)

        os.startfile(r'T:\FISCAL\Atlas App\Data\atlasporeport.csv', 'open')

        row = 0
        for ticket in self.update_df['Ticket Number']:
            
            self.txdot_setup()
            self.txdot_login(self.controller.fetch_user, self.controller.fetch_pwd)

            self.tx_driver.switch_to.default_content()
            WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sysparm_search"]')))
            self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').clear()
            self.tx_driver.find_element_by_xpath('//*[@id="sysparm_search"]').send_keys(ticket)

            time.sleep(1)

            self.tx_driver.find_element_by_css_selector('.form-control.form-control-search').send_keys(u'\ue007')
            self.tx_driver.switch_to.frame(self.tx_driver.find_element_by_xpath('//*[@id="gsft_main"]'))

            time.sleep(1)
            
            if self.update_df.loc[row,'PO Number'] in self.tx_driver.find_element_by_id('sc_task.u_peoplesoft_po_number').get_attribute('value'):
                row +=1
                self.tx_driver.close()
                continue
                
            else:

                self.tx_driver.find_element_by_xpath('//*[@id="sc_task.request_item.comments"]').send_keys('''ERP PO#: {} has been submitted for this ticket.
                Routing ticket to the proper Assignment Group for receiving of the goods and/or service.'''.format(self.update_df.loc[row,'PO Number']))

                time.sleep(1)

                self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').clear()
                self.tx_driver.find_element_by_xpath('//*[@id="sys_display.sc_task.assignment_group"]').send_keys('IMD_Pending_Receipt')

                time.sleep(1)

                self.tx_driver.find_element_by_xpath('//*[@id="sc_task.u_peoplesoft_po_number"]').send_keys('{}'.format(self.update_df.loc[row,'PO Number']))

                time.sleep(1)

                self.tx_driver.find_element_by_xpath('//*[@id="header_add_attachment"]').click()
                WebDriverWait(self.tx_driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="attachment"]')))

                upload = self.tx_driver.find_element_by_id('attachFile')
                upload.send_keys(r'T:\FISCAL\SHAREPOINT FILING DOC\PURCHASE ORDERS\60144{}.pdf'.format(self.update_df.loc[row,'PO Number']))

                self.tx_driver.find_element_by_xpath('//*[@id="attachment"]/div/div/header/button').click()
                
                WebDriverWait(self.tx_driver, 10).until(EC.element_to_be_clickable((By.ID, 'sysverb_update')))

                time.sleep(1)
                
            row +=1
        

app = P2P_Gui()
app.mainloop()
